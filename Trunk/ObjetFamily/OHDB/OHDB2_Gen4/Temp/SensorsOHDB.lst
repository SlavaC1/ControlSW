C51 COMPILER V9.52.0.0   SENSORSOHDB                                                       04/28/2015 17:26:02 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SENSORSOHDB
OBJECT MODULE PLACED IN .\Temp\SensorsOHDB.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Sensors\SensorsOHDB.c LARGE OPTIMIZE(0,SPEED) BROWSE INCDIR(..\SharedModule
                    -s\SysDef,SPI\,..\SharedModules\RingBuffer,UART\,A2D\,..\SharedModules\Xilinx,..\SharedModules\EdenProtocol,Timer\,Potent
                    -iometer\,HeaterControl\,E2PROM\,MsgDecode\,..\SharedModules\Utilities,..\SharedModules\Scheduler,..\SharedModules\Roller
                    -,Potentiometer\,PrintDriver\,Sensors\,HeadData\,Utils\,Watchdog\,Version\,Actuators\,D2A\,Comparator\,Bumper\) DEFINE(C8
                    -051F123_CPU) DEBUG OBJECTEXTEND PRINT(.\Temp\SensorsOHDB.lst) TABS(2) OBJECT(.\Temp\SensorsOHDB.obj)

line level    source

   1          /*===========================================================================
   2           *   FILENAME       : Sensors {Sensors.c}  
   3           *   PURPOSE        : Handles the material level sensors, the vacuum sensor,
   4           *                    and the ambient temperature sensor 
   5           *   DATE CREATED   : 24/Jan/2002
   6           *   PROGRAMMER     : Nir Saadon 
   7           *   PROCEDURES     : 
   8           *===========================================================================*/
   9          #include "SensorsOHDB.h"
  10          #include "Spi_A2D.h"
  11          #include "A2D.h"
  12          #include "HeadsVoltageReader.h"
  13          #include "MsgDecodeOHDB.h"
  14          #ifndef SIM_GEN4
  15          #include "SpiExtA2D.h"
  16          #endif
  17          
  18          
  19          // Constants
  20          // =========
  21          // Mapping of the sensors inputs to the analog inputs
  22          // --------------------------------------------------
  23          
  24          // Starting with a left most chamber (support)
  25          #define M1_THERM_LEVEL_SENSOR      ANALOG_IN_13 + SIM_OHDB_OFFSET //M1 thermistor
  26          #define M2_THERM_LEVEL_SENSOR      ANALOG_IN_14 + SIM_OHDB_OFFSET //M2 thermistor
  27          #define M3_THERM_LEVEL_SENSOR      ANALOG_IN_15 + SIM_OHDB_OFFSET //M3 thermistor
  28          #define M4_THERM_LEVEL_SENSOR      ANALOG_IN_16 + SIM_OHDB_OFFSET //support thermistor
  29          #define M5_THERM_LEVEL_SENSOR      ANALOG_IN_17 + SIM_OHDB_OFFSET
  30          #define M6_THERM_LEVEL_SENSOR      ANALOG_IN_18 + SIM_OHDB_OFFSET
  31          #define M7_THERM_LEVEL_SENSOR      ANALOG_IN_19 + SIM_OHDB_OFFSET
  32          #define SUPPORT_THERM_LEVEL_SENSOR ANALOG_IN_20 + SIM_OHDB_OFFSET 
  33          
  34          #ifdef SIM_GEN4
                #define S_M7_THERM_LEVEL_SENSOR    ANALOG_IN_26 + SIM_OHDB_OFFSET 
                #define M1_M2_THERM_LEVEL_SENSOR   ANALOG_IN_27 + SIM_OHDB_OFFSET 
                #define M3_M4_THERM_LEVEL_SENSOR   ANALOG_IN_28 + SIM_OHDB_OFFSET 
                #define M5_M6_THERM_LEVEL_SENSOR   ANALOG_IN_29 + SIM_OHDB_OFFSET 
              #else
  40          #define S_M7_THERM_LEVEL_SENSOR    EXT_A2D_CH4 + SIM_OHDB_OFFSET // It reads from LTC1863 unit through SPI
             - in OHDB2 rev C (SpiExtA2D module)
  41          #define M1_M2_THERM_LEVEL_SENSOR   EXT_A2D_CH7 + SIM_OHDB_OFFSET 
  42          #define M3_M4_THERM_LEVEL_SENSOR   EXT_A2D_CH6 + SIM_OHDB_OFFSET 
  43          #define M5_M6_THERM_LEVEL_SENSOR   EXT_A2D_CH5 + SIM_OHDB_OFFSET    
  44          #endif
  45            
  46          #define VACUUM_SENSOR    ANALOG_IN_21           + SIM_OHDB_OFFSET                 
  47          #define AMBIENT_TEMP_SENSOR  CPU_TEMPERATURE_SENSOR /*+ SIM_OHDB_OFFSET   - because of the manipulations i
             -n HeadsVoltagesReader*/
  48          
  49          #define V_40_VPP_SENSOR CPU_ANALOG_IN_1
C51 COMPILER V9.52.0.0   SENSORSOHDB                                                       04/28/2015 17:26:02 PAGE 2   

  50          #define V_24_SENSOR     CPU_ANALOG_IN_2
  51          #define V_12_VDD_SENSOR CPU_ANALOG_IN_3
  52          #define V_5_VCC_SENSOR  CPU_ANALOG_IN_4
  53          #define V_3_3_SENSOR    CPU_ANALOG_IN_5
  54          #define V_1_2_SENSOR    CPU_ANALOG_IN_6
  55          
  56          // Thermistors mapping for Gen4 block
  57          const BYTE xdata ThermistorLevelTable[NUM_OF_THERMISTORS] = 
  58          {
  59            SUPPORT_THERM_LEVEL_SENSOR,     
  60            M1_THERM_LEVEL_SENSOR,
  61            M2_THERM_LEVEL_SENSOR,    
  62            M3_THERM_LEVEL_SENSOR,      
  63            M4_THERM_LEVEL_SENSOR,                            
  64            M5_THERM_LEVEL_SENSOR,
  65            M6_THERM_LEVEL_SENSOR,
  66            M7_THERM_LEVEL_SENSOR,
  67            S_M7_THERM_LEVEL_SENSOR,
  68            M1_M2_THERM_LEVEL_SENSOR,
  69            M3_M4_THERM_LEVEL_SENSOR,
  70            M5_M6_THERM_LEVEL_SENSOR                                                                                               
  71          };
  72          
  73          // Type definitions
  74          // ================
  75          typedef struct
  76          {
  77            WORD HighLimit;
  78            WORD LowLimit;
  79          }TVacuumParams;
  80            
  81           
  82          // Local routines
  83          // ==============
  84          
  85          
  86          // Module variables
  87          // ================
  88          TVacuumParams xdata VacuumParams;
  89          
  90          
  91          
  92          /****************************************************************************
  93           *
  94           *  NAME        :  Sensors_GetMaterialLevelSensors
  95           *
  96           *
  97           *  DESCRIPTION :  Get the current readings of the material level sensors                                 
             -       
  98           *
  99           ****************************************************************************/
 100          void Sensors_GetMaterialLevelSensors(WORD ThermistorLevelArr[])
 101          {
 102   1          BYTE idata i = 0;
 103   1      #ifndef SIM_GEN4  
 104   1        for(; i < NUM_OF_THERMISTORS; i++)
 105   1        {
 106   2          if(i < NUM_OF_LOWER_THERMISTORS)
 107   2            ThermistorLevelArr[i] = SpiA2D_GetReading(ThermistorLevelTable[i]);
 108   2          else
 109   2            ThermistorLevelArr[i] = SpiExtA2D_GetReading(ThermistorLevelTable[i]);
 110   2        }
C51 COMPILER V9.52.0.0   SENSORSOHDB                                                       04/28/2015 17:26:02 PAGE 3   

 111   1      #else
                for(; i < NUM_OF_THERMISTORS; i++)
                {
                  ThermistorLevelArr[i] = SpiA2D_GetReading(ThermistorLevelTable[i]);
                }
              #endif
 117   1      } 
 118          
 119          
 120          /****************************************************************************
 121           *
 122           *  NAME        :  Sensors_SetHeadsVacuumParams
 123           *
 124           *
 125           *  DESCRIPTION :  Set the high and low limits for the heads vacuum                                       
             -  
 126           *
 127           ****************************************************************************/
 128          void Sensors_SetHeadsVacuumParams(WORD *Params)
 129          {
 130   1        TVacuumParams xdata *SetParams = (TVacuumParams *) Params;
 131   1      
 132   1        VacuumParams.HighLimit = SetParams->HighLimit;
 133   1        VacuumParams.LowLimit = SetParams->LowLimit;
 134   1      }
 135          
 136          
 137          /****************************************************************************
 138           *
 139           *  NAME        :  Sensors_IsHeadsVacuumOk
 140           *
 141           *
 142           *  DESCRIPTION : Check if the current readings of the vacuum sensors are
 143           *                in the requested range that was set by 
 144           *                'Sensors_SetHeadsVacuumParams'                                        
 145           *
 146           ****************************************************************************/
 147          BOOL Sensors_IsHeadsVacuumOk()
 148          {
 149   1        WORD VacuumValue;
 150   1      
 151   1        VacuumValue = SpiA2D_GetReading(VACUUM_SENSOR);
 152   1        if (VacuumValue >= VacuumParams.LowLimit && VacuumValue <= VacuumParams.HighLimit)
 153   1            return TRUE;
 154   1        
 155   1        return FALSE;
 156   1      }
 157          
 158          
 159          /****************************************************************************
 160           *
 161           *  NAME        : Sensors_GetVacuumSensor 
 162           *
 163           *
 164           *  DESCRIPTION : Get the current readings of the heads vacuum sensor                                     
             -   
 165           *
 166           ****************************************************************************/
 167          void Sensors_GetVacuumSensor(WORD *VacuumSensors)
 168          {
 169   1        *VacuumSensors = SpiA2D_GetReading(VACUUM_SENSOR); 
 170   1      }
C51 COMPILER V9.52.0.0   SENSORSOHDB                                                       04/28/2015 17:26:02 PAGE 4   

 171          
 172          
 173          /****************************************************************************
 174           *
 175           *  NAME        : Sensors_GetAmbientTempSensor 
 176           *
 177           *
 178           *  DESCRIPTION : Get the current reading of the ambient temperature sensor                               
             -          
 179           *
 180           ****************************************************************************/
 181          WORD Sensors_GetAmbientTempSensor()
 182          {
 183   1        return A2D0Reader_GetReading(AMBIENT_TEMP_SENSOR);
 184   1      }
 185          
 186          
 187          /****************************************************************************
 188           *
 189           *  NAME        : Sensors_GetPowerSuppliesVoltages 
 190           *
 191           *  DESCRIPTION : Get the current power supplies voltages (in A/D units)                                  
             -       
 192           *
 193           ****************************************************************************/
 194          void Sensors_GetPowerSuppliesVoltages(WORD* Voltages)
 195          {
 196   1        Voltages[0] = A2D2_GetReading(V_40_VPP_SENSOR);
 197   1        Voltages[1] = A2D2_GetReading(V_24_SENSOR);
 198   1        Voltages[2] = A2D2_GetReading(V_12_VDD_SENSOR);
 199   1        Voltages[3] = A2D2_GetReading(V_5_VCC_SENSOR);
 200   1        Voltages[4] = A2D2_GetReading(V_3_3_SENSOR);
 201   1        Voltages[5] = A2D2_GetReading(V_1_2_SENSOR);  
 202   1      }
 203          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    509    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     32    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      1    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
