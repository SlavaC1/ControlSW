C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MSGDECODEOHDB
OBJECT MODULE PLACED IN .\Temp\MsgDecodeOHDB.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE MsgDecode\MsgDecodeOHDB.c LARGE OPTIMIZE(0,SPEED) BROWSE INCDIR(..\SharedMo
                    -dules\SysDef,SPI\,..\SharedModules\RingBuffer,UART\,A2D\,..\SharedModules\Xilinx,..\SharedModules\EdenProtocol,Timer\,Po
                    -tentiometer\,HeaterControl\,E2PROM\,MsgDecode\,..\SharedModules\Utilities,..\SharedModules\Scheduler,..\SharedModules\Ro
                    -ller,Potentiometer\,PrintDriver\,Sensors\,HeadData\,Utils\,Watchdog\,Version\,Actuators\,D2A\,Comparator\,Bumper\) DEFIN
                    -E(C8051F123_CPU) DEBUG OBJECTEXTEND PRINT(.\Temp\MsgDecodeOHDB.lst) TABS(2) OBJECT(.\Temp\MsgDecodeOHDB.obj)

line level    source

   1          /*===========================================================================
   2           *   FILENAME       : Message Decode {MsdDecode.c}  
   3           *   PURPOSE        : Decode message received by Eden serial protocol  
   4           *   DATE CREATED   : 3/Dec/2001
   5           *   PROGRAMMER     : Nir Saadon 
   6           *   PROCEDURES     : 
   7           *===========================================================================*/
   8          
   9          
  10          #include <string.h>
  11          #include "MsgDecodeOHDB.h"
  12          #include "XilinxInterface.h"
  13          
  14          #ifdef OCB_SIMULATOR
                #include "EdenProtocol.h"
                #include "..\EXTMemSim\EXTMem.h"
                #include "..\..\..\OHDB\OHDB2_Gen4\Potentiometer\PotentiometerOHDB.h"
              #else
  19            #include "EdenProtocolOHDB.h"
  20            #include "PotentiometerOHDB.h"
  21          #endif
  22          
  23          #include "E2PROMInterface.h"
  24          #include "ByteOrder.h"
  25          #include "Roller.h"
  26          #include "SensorsOHDB.h"
  27          #include "TimerDrv.h"
  28          #include "Version.h"
  29          #include "ActuatorsOHDB.h"
  30          #include "WatchDog.h"
  31          #include "Bumper.h"
  32          #include "HeadsVoltageReader.h"
  33          #include "PrintDriver.h"
  34          
  35          // Constants
  36          // =========
  37          
  38          // Set printing heads params task selected head index
  39          BYTE data HeadIndex = 0;
  40          
  41          BYTE xdata PULSE1_FT_REGS[NUM_OF_HEADS] =
  42          {
  43            FPGA_REG_PULSE1_FT_HEAD1,
  44            FPGA_REG_PULSE1_FT_HEAD2,
  45            FPGA_REG_PULSE1_FT_HEAD3,
  46            FPGA_REG_PULSE1_FT_HEAD4,
  47            FPGA_REG_PULSE1_FT_HEAD5,
  48            FPGA_REG_PULSE1_FT_HEAD6,
  49            FPGA_REG_PULSE1_FT_HEAD7,
  50            FPGA_REG_PULSE1_FT_HEAD8
  51          };
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 2   

  52          
  53          BYTE xdata PULSE2_WIDTH_REGS[NUM_OF_HEADS] =
  54          {
  55            FPGA_REG_PULSE2_WIDTH_HEAD1,
  56            FPGA_REG_PULSE2_WIDTH_HEAD2,
  57            FPGA_REG_PULSE2_WIDTH_HEAD3,
  58            FPGA_REG_PULSE2_WIDTH_HEAD4,
  59            FPGA_REG_PULSE2_WIDTH_HEAD5,
  60            FPGA_REG_PULSE2_WIDTH_HEAD6,
  61            FPGA_REG_PULSE2_WIDTH_HEAD7,
  62            FPGA_REG_PULSE2_WIDTH_HEAD8
  63          };
  64          
  65          BYTE xdata PULSE1_DWELL_REGS[NUM_OF_HEADS] =
  66          {
  67            FPGA_REG_PULSE1_DWELL_HEAD1,
  68            FPGA_REG_PULSE1_DWELL_HEAD2,
  69            FPGA_REG_PULSE1_DWELL_HEAD3,
  70            FPGA_REG_PULSE1_DWELL_HEAD4,
  71            FPGA_REG_PULSE1_DWELL_HEAD5,
  72            FPGA_REG_PULSE1_DWELL_HEAD6,
  73            FPGA_REG_PULSE1_DWELL_HEAD7,
  74            FPGA_REG_PULSE1_DWELL_HEAD8
  75          };
  76          
  77          BYTE xdata PULSE_DELAY_REGS[NUM_OF_HEADS] =
  78          {
  79            FPGA_REG_DELAY_HEAD1,
  80            FPGA_REG_DELAY_HEAD2,
  81            FPGA_REG_DELAY_HEAD3,
  82            FPGA_REG_DELAY_HEAD4,
  83            FPGA_REG_DELAY_HEAD5,
  84            FPGA_REG_DELAY_HEAD6,
  85            FPGA_REG_DELAY_HEAD7,
  86            FPGA_REG_DELAY_HEAD8
  87          };
  88          
  89          // the delay before performing the reset to allow the ack  msg to be sent
  90          // ---------------------------------------------------------------------- 
  91          #define DELAY_BEFORE_RESET   15
  92          
  93          // Message fields number in the message buffer
  94          // -------------------------------------------
  95          #ifdef OCB_SIMULATOR
                #define SOURCE_ID_INDEX    2
                #define DESTINATION_ID_INDEX 3
                #define TRANSACTION_ID_INDEX 4
                #define MSG_ID_INDEX     5
                #define DATA_INDEX       6
              #else               
 102            #define SOURCE_ID_INDEX    0
 103            #define DESTINATION_ID_INDEX 1
 104            #define TRANSACTION_ID_INDEX 2
 105            #define MSG_ID_INDEX     3
 106            #define DATA_INDEX       4
 107          #endif
 108          
 109          #define HARDWARE_VERSION_REG_ADDR 0x08
 110          
 111          #ifdef OCB_SIMULATOR
                typedef struct 
                {
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 3   

                  BYTE DestId;
                  BYTE TransactionId;
                  WORD Address;
                  BYTE Data;
                }TReadRegisterTaskParams;
                
                typedef struct 
                {
                  BYTE DestId;
                  BYTE TransactionId;
                  WORD Address;
                  BYTE Data;
                }TWriteRegisterTaskParams;
              #endif
 128          
 129          // tasks params structs
 130          // --------------------
 131          typedef struct 
 132          {
 133            BYTE DestId;
 134            BYTE TransactionId;
 135          }TIsHeadTempOkTaskParams;
 136          
 137          typedef struct 
 138          {
 139            BYTE Address;
 140            WORD Data;
 141            BYTE DestId;
 142            BYTE TransactionId;
 143          }TXilinxWriteTaskParams;
 144          
 145          typedef struct 
 146          {
 147            BYTE DestId;
 148            BYTE TransactionId;
 149            BYTE HeadNum;
 150            BYTE Value;
 151          }TOHDBPotentiometerWriteTaskParams;
 152          
 153          typedef struct 
 154          {
 155            BYTE DestId;
 156            BYTE TransactionId;
 157            BYTE DeviceNum;
 158            WORD Address;
 159            BYTE Data;
 160          }TE2PROMWriteTaskParams;
 161          
 162          typedef struct 
 163          {
 164            BYTE DestId;
 165            BYTE TransactionId;
 166            BYTE DeviceNum;
 167            WORD Address;
 168          }TE2PROMReadTaskParams;
 169          
 170          typedef struct 
 171          {
 172            BYTE DestId;
 173            BYTE TransactionId;
 174            BYTE Address;
 175            WORD Data;  //Xilinx Data
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 4   

 176          }TXilinxReadTaskParams;
 177          
 178          typedef struct 
 179          {
 180            BYTE DestId;
 181            BYTE TransactionId;
 182          }TOHDBGetA2DReadingsTaskParams;
 183          
 184          typedef struct 
 185          {
 186            BYTE DestId;
 187            BYTE TransactionId;
 188            BYTE RollerOnOff;
 189          }TSetRollerOnOffTaskParams;
 190          
 191          typedef struct 
 192          {
 193            BYTE DestId;
 194            BYTE TransactionId;
 195            WORD Speed;
 196          }TSetRollerSpeedTaskParams;
 197          
 198          typedef struct 
 199          {
 200            BYTE DestId;
 201            BYTE TransactionId;
 202            WORD Speed;
 203          }TGetRollerStatusTaskParams;
 204          
 205          
 206          typedef struct 
 207          {
 208            BYTE DestId;
 209            BYTE TransactionId;
 210            BYTE PulseType;
 211            BYTE DataMultiplier;
 212            BYTE ResolutionDivider;
 213            BYTE FirstPulseDwellTime[NUM_OF_HEADS];
 214            BYTE FirstPulseFallTime [NUM_OF_HEADS];
 215            BYTE SecondPulseWidth   [NUM_OF_HEADS];
 216            BYTE DelayToSecondPulse [NUM_OF_HEADS]; 
 217          }TSetPrintingHeadsTaskParams;
 218          
 219          typedef struct 
 220          {
 221            BYTE DestId;
 222            BYTE TransactionId;
 223            WORD StartPeg;
 224            WORD EndPeg;
 225            WORD NumOfFires;
 226            WORD BumperStartPeg;
 227            WORD BumperEndPeg;
 228          }TSetPrintingPassTaskParams;
 229          
 230          typedef struct 
 231          {
 232            BYTE DestId;
 233            BYTE TransactionId;
 234          }TEnablePrintingCircuitryTaskParams;
 235          
 236          typedef struct 
 237          {
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 5   

 238            BYTE DestId;
 239            BYTE TransactionId;
 240          }TDisablePrintingCircuitryTaskParams;
 241          
 242          typedef struct 
 243          {
 244            BYTE DestId;
 245            BYTE TransactionId;
 246          }TGetHeatersStatusTaskParams;
 247          
 248          typedef struct 
 249          {
 250            BYTE DestId;
 251            BYTE TransactionId;
 252          }TSetHeatersStandbyTempTaskParams;
 253          
 254          typedef struct 
 255          {
 256            BYTE DestId;
 257            BYTE TransactionId;
 258          }TGetHeatersStandbyTempTaskParams;
 259          
 260          typedef struct 
 261          {
 262            BYTE DestId;
 263            BYTE TransactionId;
 264          }TSetBumperParamsTaskParams;
 265          
 266          typedef struct 
 267          {
 268            BYTE DestId;
 269            BYTE TransactionId;
 270          }TSetHeatersTempTaskParams;
 271          
 272          typedef struct 
 273          {
 274            BYTE DestId;
 275            BYTE TransactionId;
 276          }TSetHeatersOnOffTaskParams;
 277          
 278          typedef struct 
 279          {
 280            BYTE DestId;
 281            BYTE TransactionId;
 282          }TGetMaterialLevelTaskParams;
 283          
 284          typedef struct 
 285          {
 286            BYTE DestId;
 287            BYTE TransactionId;
 288          }TIsHeadsVacuumOkTaskParms;
 289          
 290          typedef struct 
 291          {
 292            BYTE DestId;
 293            BYTE TransactionId;
 294          }TGetVacuumSensorTaskParams;
 295          
 296          typedef struct 
 297          {
 298            BYTE DestId;
 299            BYTE TransactionId;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 6   

 300          }TGetAmbientTempTaskParams;
 301          
 302          typedef struct 
 303          {
 304            BYTE DestId;
 305            BYTE TransactionId;
 306          }TSetHeadsVacuumTaskParams;
 307          
 308          typedef struct 
 309          {
 310            BYTE DestId;
 311            BYTE TransactionId;
 312          }TResetDriverCircuitTaskParams;
 313          
 314          typedef struct 
 315          {
 316            BYTE DestId;
 317            BYTE TransactionId;
 318          }TResetDriverStateTaskParams;
 319          
 320          typedef struct 
 321          {
 322            BYTE DestId;
 323            BYTE TransactionId;
 324          }TApplyDefaultParamsTaskParams;
 325          
 326          typedef struct 
 327          {
 328            BYTE DestId;
 329            BYTE TransactionId;
 330          }TGetSoftwareVersionTaskParams;
 331          
 332          typedef struct 
 333          {
 334            BYTE DestId;
 335            BYTE TransactionId;
 336          }TOHDBGetA2DSWVersionTaskParams;
 337          
 338          typedef struct 
 339          {
 340            BYTE DestId;
 341            BYTE TransactionId;
 342          }TGetHardwareVersionTaskParams;
 343              
 344          typedef struct 
 345          {
 346            BYTE DestId;
 347            BYTE TransactionId;
 348          }TOHDBPingTaskParams;
 349          
 350          typedef struct
 351          {
 352            BYTE DestId;
 353            BYTE TransactionId;
 354            BYTE PotentiometerValues[8];
 355          }TSetHeadVoltageTaskParams;
 356          
 357          typedef struct 
 358          {
 359            BYTE DestId;
 360            BYTE TransactionId;
 361          }TGetHeadVoltageTaskParams;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 7   

 362          
 363          typedef struct 
 364          {
 365            BYTE DestId;
 366            BYTE TransactionId;
 367          }TGetPowerSuppliesTaskParams;
 368          
 369          typedef struct 
 370          {
 371            BYTE DestId;
 372            BYTE TransactionId;
 373            BYTE HeadNum;
 374          }TGetHeadDataTaskParams;
 375          
 376          typedef struct 
 377          {
 378            BYTE DestId;
 379            BYTE TransactionId;
 380          }TSetMaterialCoolingFansTaskParams;
 381          
 382          typedef struct 
 383          {
 384            BYTE DestId;
 385            BYTE TransactionId;
 386          }TGetFireAllStatusTaskParams;
 387          
 388          typedef struct 
 389          {
 390            BYTE DestId;
 391            BYTE TransactionId;
 392          }TSetDebugModeTaskParams;
 393          
 394          typedef struct 
 395          {
 396            BYTE DestId;
 397            BYTE TransactionId;
 398          }TSetHeadDataNackTaskParams;
 399          
 400          typedef struct 
 401          {
 402            BYTE DestId;
 403            BYTE TransactionId;
 404          }TSetBumperImpactOnOffTaskParams;
 405          
 406          typedef struct 
 407          {
 408            BYTE DestId;
 409            BYTE TransactionId;
 410            BYTE OnOff;
 411          }TSetBumperPegOnOffTaskParams;
 412          
 413          typedef struct 
 414          {
 415            BYTE DestId;
 416            BYTE TransactionId;
 417            BYTE OnOff;
 418          }TSetVirtualEncoderTaskParams;
 419          
 420          
 421          #ifdef OCB_SIMULATOR
                TReadRegisterTaskParams  xdata ReadRegisterTaskParams;
                TWriteRegisterTaskParams xdata WriteRegisterTaskParams;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 8   

              #endif
 425              
 426          // Module variables
 427          // ================
 428          
 429          BYTE xdata FreeCellIndex = 0; //Xilinx Data
 430          BYTE xdata CurrMsgIndex  = 0; //Xilinx Data
 431          
 432          RBUF_MsgRingBuffer xdata *MsgRingBuffPtr;
 433          
 434          TIsHeadTempOkTaskParams       xdata IsHeadTempOkTaskParams;
 435          TXilinxWriteTaskParams        xdata XilinxWriteTaskParams;
 436          TOHDBPotentiometerWriteTaskParams   xdata OHDBPotentiometerTaskParams;
 437          TE2PROMWriteTaskParams        xdata E2PROMWriteTaskParams;
 438          TE2PROMReadTaskParams         xdata E2PROMReadTaskParams; 
 439          TXilinxReadTaskParams         xdata XilinxReadTaskParams[6]; //Xilinx Data
 440          TOHDBGetA2DReadingsTaskParams     xdata OHDBGetA2DReadingsTaskParams;
 441          TSetRollerOnOffTaskParams       xdata SetRollerOnOffTaskParams;
 442          TSetRollerSpeedTaskParams       xdata SetRollerSpeedTaskParams;
 443          TGetRollerStatusTaskParams      xdata GetRollerStatusTaskParams;
 444          TSetPrintingHeadsTaskParams     xdata SetPrintingHeadsTaskParams;
 445          TSetPrintingPassTaskParams      xdata SetPrintingPassTaskParams;
 446          TEnablePrintingCircuitryTaskParams  xdata EnablePrintingCircuitryTaskParams;
 447          TDisablePrintingCircuitryTaskParams xdata DisablePrintingCircuitryTaskParams;
 448          TGetHeatersStatusTaskParams         xdata GetHeatersStatusTaskParams;
 449          TSetHeatersStandbyTempTaskParams    xdata SetHeatersStandbyTempTaskParams;
 450          TGetHeatersStandbyTempTaskParams    xdata GetHeatersStandbyTempTaskParams;
 451          TSetBumperParamsTaskParams          xdata SetBumperParamsTaskParams;
 452          TSetHeatersTempTaskParams       xdata SetHeatersTempTaskParams;
 453          TSetHeatersOnOffTaskParams      xdata SetHeatersOnOffTaskParams;
 454          TGetMaterialLevelTaskParams     xdata GetMaterialLevelTaskParams;
 455          TIsHeadsVacuumOkTaskParms       xdata IsHeadsVacuumOkTaskParms;
 456          TGetVacuumSensorTaskParams      xdata GetVacuumSensorTaskParams;
 457          TGetAmbientTempTaskParams       xdata GetAmbientTempTaskParams;
 458          TSetHeadsVacuumTaskParams       xdata SetHeadsVacuumTaskParams;
 459          TResetDriverCircuitTaskParams     xdata ResetDriverCircuitTaskParams;
 460          TResetDriverStateTaskParams     xdata ResetDriverStateTaskParams;
 461          TApplyDefaultParamsTaskParams   xdata ApplyDefaultParamsTaskParams;
 462          TGetSoftwareVersionTaskParams     xdata GetSoftwareVersionTaskParams;
 463          TOHDBGetA2DSWVersionTaskParams    xdata OHDBGetA2DSWVersionTaskParams;
 464          TGetHardwareVersionTaskParams     xdata GetHardwareVersionTaskParams;
 465          TOHDBPingTaskParams         xdata OHDBPingTaskParams;
 466          TSetHeadVoltageTaskParams     xdata SetHeadVoltageTaskParams;
 467          TGetHeadVoltageTaskParams       xdata GetHeadVoltageTaskParams;
 468          TGetPowerSuppliesTaskParams     xdata GetPowerSuppliesTaskParams;
 469          TGetHeadDataTaskParams        xdata GetHeadDataTaskParams;
 470          TSetMaterialCoolingFansTaskParams   xdata SetMaterialCoolingFansTaskParams;
 471          TGetFireAllStatusTaskParams     xdata GetFireAllStatusTaskParams;
 472          TSetDebugModeTaskParams       xdata SetDebugModeTaskParams;
 473          TSetHeadDataNackTaskParams      xdata SetHeadDataNackTaskParams;
 474          TSetBumperImpactOnOffTaskParams   xdata SetBumperImpactOnOffTaskParams;
 475          TSetBumperPegOnOffTaskParams    xdata SetBumperPegOnOffTaskParams;
 476          TSetVirtualEncoderTaskParams    xdata SetVirtualEncoderTaskParams;
 477          
 478          // Tasks handles
 479          // -------------
 480          TTaskHandle xdata IsHeadTempOkTaskHandle;
 481          TTaskHandle xdata XilinxWriteTaskHandle;
 482          TTaskHandle xdata OHDBPotentiometerWriteTaskHandle;
 483          TTaskHandle xdata E2PROMWriteTaskHandle;
 484          TTaskHandle xdata E2PROMReadTaskHandle;
 485          TTaskHandle xdata XilinxReadTaskHandle;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 9   

 486          TTaskHandle xdata OHDBGetA2DReadingsTaskHandle;
 487          TTaskHandle xdata SetRollerOnOffTaskHandle;
 488          TTaskHandle xdata SetRollerSpeedTaskHandle;
 489          TTaskHandle xdata GetRollerStatusTaskHandle;
 490          TTaskHandle xdata SetPrintingHeadsParamsTaskHandle;
 491          TTaskHandle xdata SetPrintingPassParamsTaskHandle;
 492          TTaskHandle xdata EnablePrintingCircuitryTaskHandle;
 493          TTaskHandle xdata DisablePrintingCircuitryTaskHandle;
 494          TTaskHandle xdata GetHeatersStatusTaskHandle;
 495          TTaskHandle xdata SetHeatersStandbyTempTaskHandle;
 496          TTaskHandle xdata GetHeatersStandbyTempTaskHandle;
 497          TTaskHandle xdata SetBumperParamsTaskHandle;
 498          TTaskHandle xdata SetHeatersTempTaskHandle;
 499          TTaskHandle xdata SetHeatersOnOffTaskHandle;
 500          TTaskHandle xdata GetMaterialLevelTaskHandle;
 501          TTaskHandle xdata IsHeadsVacuumOkTaskHandle;
 502          TTaskHandle xdata GetVacuumSensorTaskHandle;
 503          TTaskHandle xdata GetAmbientTempTaskHandle;
 504          TTaskHandle xdata SetHeadsVacuumTaskHandle;
 505          TTaskHandle xdata ResetDriverCircuitTaskHandle;
 506          TTaskHandle xdata ResetDriverStateTaskHandle;
 507          TTaskHandle xdata ApplyDefaultParamsTaskHandle;
 508          TTaskHandle xdata FireAllTaskHandle;
 509          TTaskHandle xdata GetSoftwareVersionTaskHandle;
 510          TTaskHandle xdata OHDBGetA2DSWVersionTaskHandle;
 511          TTaskHandle xdata GetHardwareVersionTaskHandle;
 512          TTaskHandle xdata OHDBPingTaskHandle;
 513          TTaskHandle xdata SetHeadVoltageTaskHandle;
 514          TTaskHandle xdata GetHeadVoltageTaskHandle;
 515          TTaskHandle xdata GetPowerSuppliesTaskHandle;
 516          TTaskHandle xdata GetHeadDataTaskHandle;
 517          TTaskHandle xdata SetMaterialCoolingFansTaskHandle;
 518          TTaskHandle xdata GetFireAllStatusTaskHandle;
 519          TTaskHandle xdata SetDebugModeTaskHandle;
 520          TTaskHandle xdata SetHeadDataNackTaskHandle;
 521          TTaskHandle xdata SetBumperImpactOnOffTaskHandle;
 522          TTaskHandle xdata SetBumperPegOnOffTaskHandle;
 523          TTaskHandle xdata SetVirtualEncoderTaskHandle;
 524          
 525          #ifdef OCB_SIMULATOR
                TTaskHandle xdata ReadRegisterTaskHandle;
                TTaskHandle xdata WriteRegisterTaskHandle;
              #endif
 529          
 530          // Local routines
 531          // --------------
 532          void IsHeadTempOkTask(BYTE Arg);
 533          void XilinxWriteTask(BYTE Arg);
 534          void PotentiometerWriteTask(BYTE Arg);
 535          void E2PROMWriteTask(BYTE Arg);
 536          void E2PROMReadTask(BYTE Arg);
 537          void XilinxReadTask(BYTE Arg);
 538          void OHDBGetA2DReadingsTask(BYTE Arg);
 539          void SetRollerOnOffTask(BYTE Arg);
 540          void SetRollerSpeedTask(BYTE Arg);
 541          void GetRollerStatusTask(BYTE Arg);
 542          void SetPrintingHeadsParamsTask(BYTE Arg);
 543          void SetPrintingPassParamsTask(BYTE Arg);
 544          void EnablePrintingCircuitryTask(BYTE Arg);
 545          void DisablePrintingCircuitryTask(BYTE Arg);
 546          void GetHeatersStatusTask(BYTE Arg);
 547          void SetHeatersStandbyTempTask(BYTE Arg);
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 10  

 548          void GetHeatersStandbyTempTask(BYTE Arg);
 549          void SetBumperParamsTask(BYTE Arg);
 550          void SetHeatersTempTask(BYTE Arg);
 551          void SetHeatersOnOffTask(BYTE Arg);
 552          void GetMaterialLevelTask(BYTE Arg);
 553          void IsHeadsVacuumOkTask(BYTE Arg);
 554          void GetVacuumSensorTask(BYTE Arg);
 555          void GetAmbientTempTask(BYTE Arg);
 556          void SetHeadsVacuumTask(BYTE Arg);
 557          void ResetDriverCircuitTask(BYTE Arg);
 558          void ResetDriverStateTask(BYTE Arg);
 559          void ApplyDefaultParamsTask(BYTE Arg);
 560          void GetSoftwareVersionTask(BYTE Arg);
 561          void OHDBGetA2DSWVersionTask(BYTE Arg);
 562          void GetHardwareVersionTask(BYTE Arg);
 563          void OHDBPingTask(BYTE Arg);
 564          void SetPrintingHeadVoltageTask(BYTE Arg);
 565          void GetPrintingHeadVoltageTask(BYTE Arg);
 566          void GetPowerSuppliesTask(BYTE Arg);
 567          void GetHeadDataTask(BYTE Arg);
 568          void SetMaterialCoolingFansTask(BYTE Arg);
 569          void GetFireAllStatusTask(BYTE Arg);
 570          void SetDebugModeTask(BYTE Arg);
 571          void SetHeadDataNackTask(BYTE Arg);
 572          void SetBumperImpactOnOffTask(BYTE Arg);
 573          void SetBumperPegOnOffTask(BYTE Arg);
 574          void SetVirtualEncoderTask(BYTE Arg);
 575          
 576          #ifdef OCB_SIMULATOR
                void ReadRegisterTask(BYTE Arg);
                void WriteRegisterTask(BYTE Arg);
              #endif
 580          
 581          /****************************************************************************
 582           *
 583           *  NAME        : MessageDecodeInit
 584           *
 585           *  DESCRIPTION : Initialization of the message decoder 
 586           ****************************************************************************/
 587          void MessageDecodeInitOHDB()
 588          {
 589   1      #ifdef OCB_SIMULATOR
                  ReadRegisterTaskHandle  = SchedulerInstallTask(ReadRegisterTask);
                  WriteRegisterTaskHandle = SchedulerInstallTask(WriteRegisterTask);
              #endif
 593   1        MsgRingBuffPtr = OHDBEdenProtocolGetMsgBuff();
 594   1        MsgRingBuffInit(MsgRingBuffPtr);
 595   1        IsHeadTempOkTaskHandle             = SchedulerInstallTask(IsHeadTempOkTask);
 596   1        XilinxWriteTaskHandle              = SchedulerInstallTask(XilinxWriteTask);
 597   1        OHDBPotentiometerWriteTaskHandle   = SchedulerInstallTask(PotentiometerWriteTask);
 598   1        E2PROMWriteTaskHandle              = SchedulerInstallTask(E2PROMWriteTask);
 599   1        E2PROMReadTaskHandle               = SchedulerInstallTask(E2PROMReadTask);
 600   1        XilinxReadTaskHandle               = SchedulerInstallTask(XilinxReadTask);
 601   1        OHDBGetA2DReadingsTaskHandle       = SchedulerInstallTask(OHDBGetA2DReadingsTask);
 602   1        SetRollerOnOffTaskHandle           = SchedulerInstallTask(SetRollerOnOffTask);
 603   1        SetRollerSpeedTaskHandle           = SchedulerInstallTask(SetRollerSpeedTask);
 604   1        GetRollerStatusTaskHandle          = SchedulerInstallTask(GetRollerStatusTask);
 605   1        SetPrintingHeadsParamsTaskHandle   = SchedulerInstallTask(SetPrintingHeadsParamsTask);
 606   1        SetPrintingPassParamsTaskHandle    = SchedulerInstallTask(SetPrintingPassParamsTask);
 607   1        EnablePrintingCircuitryTaskHandle  = SchedulerInstallTask(EnablePrintingCircuitryTask);
 608   1        DisablePrintingCircuitryTaskHandle = SchedulerInstallTask(DisablePrintingCircuitryTask);
 609   1        GetHeatersStatusTaskHandle         = SchedulerInstallTask(GetHeatersStatusTask);
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 11  

 610   1        SetHeatersStandbyTempTaskHandle    = SchedulerInstallTask(SetHeatersStandbyTempTask);
 611   1        GetHeatersStandbyTempTaskHandle    = SchedulerInstallTask(GetHeatersStandbyTempTask);
 612   1        SetBumperParamsTaskHandle        = SchedulerInstallTask(SetBumperParamsTask);
 613   1        SetHeatersTempTaskHandle           = SchedulerInstallTask(SetHeatersTempTask);
 614   1        SetHeatersOnOffTaskHandle          = SchedulerInstallTask(SetHeatersOnOffTask);
 615   1        GetMaterialLevelTaskHandle         = SchedulerInstallTask(GetMaterialLevelTask);
 616   1        IsHeadsVacuumOkTaskHandle          = SchedulerInstallTask(IsHeadsVacuumOkTask);
 617   1        GetVacuumSensorTaskHandle          = SchedulerInstallTask(GetVacuumSensorTask);
 618   1        GetAmbientTempTaskHandle           = SchedulerInstallTask(GetAmbientTempTask);
 619   1        SetHeadsVacuumTaskHandle           = SchedulerInstallTask(SetHeadsVacuumTask);
 620   1        ResetDriverCircuitTaskHandle       = SchedulerInstallTask(ResetDriverCircuitTask);
 621   1        ResetDriverStateTaskHandle         = SchedulerInstallTask(ResetDriverStateTask);
 622   1        ApplyDefaultParamsTaskHandle       = SchedulerInstallTask(ApplyDefaultParamsTask);
 623   1        FireAllTaskHandle                  = SchedulerInstallTask(PrintDrv_FireAllTask);
 624   1        GetSoftwareVersionTaskHandle       = SchedulerInstallTask(GetSoftwareVersionTask);
 625   1        OHDBGetA2DSWVersionTaskHandle      = SchedulerInstallTask(OHDBGetA2DSWVersionTask);
 626   1        GetHardwareVersionTaskHandle       = SchedulerInstallTask(GetHardwareVersionTask);
 627   1        OHDBPingTaskHandle                 = SchedulerInstallTask(OHDBPingTask);
 628   1          SetHeadVoltageTaskHandle           = SchedulerInstallTask(SetPrintingHeadVoltageTask);
 629   1          GetHeadVoltageTaskHandle           = SchedulerInstallTask(GetPrintingHeadVoltageTask);
 630   1        GetPowerSuppliesTaskHandle         = SchedulerInstallTask(GetPowerSuppliesTask);
 631   1          GetHeadDataTaskHandle              = SchedulerInstallTask(GetHeadDataTask); 
 632   1        SetMaterialCoolingFansTaskHandle   = SchedulerInstallTask(SetMaterialCoolingFansTask);
 633   1          GetFireAllStatusTaskHandle         = SchedulerInstallTask(GetFireAllStatusTask);
 634   1        SetDebugModeTaskHandle             = SchedulerInstallTask(SetDebugModeTask);
 635   1          SetHeadDataNackTaskHandle          = SchedulerInstallTask(SetHeadDataNackTask);
 636   1        SetBumperImpactOnOffTaskHandle     = SchedulerInstallTask(SetBumperImpactOnOffTask);
 637   1        SetBumperPegOnOffTaskHandle        = SchedulerInstallTask(SetBumperPegOnOffTask);
 638   1      //  SetVirtualEncoderTaskHandle        = SchedulerInstallTask(SetVirtualEncoderTask);   
 639   1      }
 640          
 641          
 642          /****************************************************************************
 643           *
 644           *  NAME        : OHDBMessageDecodeTask
 645           *
 646           *  DESCRIPTION : This task checks if there is a new message and decodes it 
 647           ****************************************************************************/
 648          void OHDBMessageDecodeTask(BYTE Arg)
 649          {
 650   1        int xdata MsgHandle;
 651   1        BYTE xdata *Message;
 652   1      
 653   1        MsgHandle = GetReadyMsgHandle(MsgRingBuffPtr);
 654   1        if (MsgHandle != -1)
 655   1        {
 656   2          Message = GetMsgPtrByHandle(MsgRingBuffPtr, MsgHandle);
 657   2      
 658   2          MessageDecodeOHDB(Message);
 659   2          RemoveMsg(MsgRingBuffPtr);
 660   2        }
 661   1      
 662   1        SchedulerLeaveTask(Arg);
 663   1      }
 664          
 665          
 666          
 667          /****************************************************************************
 668           *
 669           *  NAME        : MessageDecode
 670           *
 671           *  DESCRIPTION : Decodes a message recived by the Eden serial protocol 
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 12  

 672           ****************************************************************************/
 673          void MessageDecodeOHDB(BYTE *Message) 
 674          {
 675   1        BYTE MsgId, TransactionId, SrcId, DestId;
 676   1        
 677   1        SrcId = Message[SOURCE_ID_INDEX];
 678   1        DestId = Message[DESTINATION_ID_INDEX];
 679   1        MsgId = Message[MSG_ID_INDEX];
 680   1        TransactionId = Message[TRANSACTION_ID_INDEX];
 681   1      
 682   1          // Reset the CommunicationLoss timer, since we got a message From Computer with us (OHDB) as destinati
             -on.
 683   1          if (SrcId == EDEN_DEST_ID)
 684   1            ResetCommunicationTimeout();
 685   1      
 686   1        switch(MsgId)
 687   1        {
 688   2          case PING_MSG:
 689   2            OHDBPingTaskParams.DestId = SrcId;
 690   2            OHDBPingTaskParams.TransactionId = TransactionId;
 691   2      
 692   2            SchedulerResumeTask(OHDBPingTaskHandle,0);
 693   2            break;
 694   2      
 695   2      #ifdef OCB_SIMULATOR      
                  case WRITE_TO_REGISTER_MGS:
                  {
                    
                    TWriteRegisterMsg xdata *WriteRegisterMsg = (TWriteRegisterMsg*) &(Message[DATA_INDEX]);
                    TReadRegisterResponseMsg Msg;
                     
                      SwapUnsignedShort(&(WriteRegisterMsg->Address));
                      WriteRegisterTaskParams.DestId = SrcId;
                    WriteRegisterTaskParams.TransactionId = TransactionId;
                      EXTMem_Write(WriteRegisterMsg->Address, WriteRegisterMsg->Data);
                    EXTMem_Read(WriteRegisterMsg->Address, &Msg.Data);
                      SchedulerResumeTask(WriteRegisterTaskHandle,0);
                   
                    break;
                  }
              
                  case READ_FROM_REGISTER_MSG:
                  {
                       TReadRegisterMsg xdata *ReadRegisterMsg = (TReadRegisterMsg*) &(Message[DATA_INDEX]); 
                       SwapUnsignedShort(&(ReadRegisterMsg->Address));
                     ReadRegisterTaskParams.DestId = SrcId;
                     ReadRegisterTaskParams.TransactionId = TransactionId;
                     ReadRegisterTaskParams.Address = ReadRegisterMsg->Address; // pass the address to the read function  
             - 
                
                       SchedulerResumeTask(ReadRegisterTaskHandle,0);
                     break;
                  }
               #endif
 724   2          case SET_HEATERS_TEMPERATURES_MSG:
 725   2          {   
 726   3            TSetHeatersTemperatureMsg xdata *SetHeatersTemp = (TSetHeatersTemperatureMsg*) &(Message[DATA_INDEX]);
 727   3            SwapUnsignedShortArray((WORD*) SetHeatersTemp,(WORD*) SetHeatersTemp,NUM_OF_HEATERS);
 728   3      
 729   3            SwapUnsignedShort(&(SetHeatersTemp->HighThreshold));
 730   3            SwapUnsignedShort(&(SetHeatersTemp->LowThreshold));
 731   3            SwapUnsignedShort(&(SetHeatersTemp->BlockHighThreshold));
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 13  

 732   3            SwapUnsignedShort(&(SetHeatersTemp->BlockLowThreshold));
 733   3            SwapUnsignedShort(&(SetHeatersTemp->HeatingRate));
 734   3      
 735   3                  HeaterSetTemperatures(MODEL_HEAD_1_HEATER, NUM_OF_HEATERS,(WORD*) SetHeatersTemp, SetHeatersTe
             -mp->LowThreshold, SetHeatersTemp->HighThreshold, SetHeatersTemp->BlockLowThreshold, SetHeatersTemp->BlockHighThreshold,S
             -etHeatersTemp->HeatingRate, SetHeatersTemp->KeepHeatingEvenOpenOrShortCircuit);
 736   3      
 737   3            SetHeatersTempTaskParams.DestId = SrcId;
 738   3            SetHeatersTempTaskParams.TransactionId = TransactionId;
 739   3            
 740   3            SchedulerResumeTask(SetHeatersTempTaskHandle,0);
 741   3      
 742   3            break;
 743   3          }
 744   2      
 745   2          case GET_HEATERS_STATUS_MSG:
 746   2            GetHeatersStatusTaskParams.DestId = SrcId;
 747   2            GetHeatersStatusTaskParams.TransactionId = TransactionId;
 748   2            
 749   2            SchedulerResumeTask(GetHeatersStatusTaskHandle,0);
 750   2            break;
 751   2      
 752   2          case IS_HEAD_TEMPERATURE_OK_MSG:
 753   2            IsHeadTempOkTaskParams.DestId = SrcId;
 754   2            IsHeadTempOkTaskParams.TransactionId = TransactionId;
 755   2      
 756   2            SchedulerResumeTask(IsHeadTempOkTaskHandle,0);
 757   2            break;
 758   2          
 759   2          case SET_HEATERS_STANDBY_TEMPERATURE_MSG:
 760   2          {
 761   3            TSetHeatersStandbyTemperatureMsg xdata *StandbyTempMsg = (TSetHeatersStandbyTemperatureMsg*) &(Message[
             -DATA_INDEX]); 
 762   3            SwapUnsignedShortArray((WORD*) StandbyTempMsg,(WORD*) StandbyTempMsg,NUM_OF_HEATERS);
 763   3             
 764   3            HeaterSetStandbyTemperatures(MODEL_HEAD_1_HEATER, EXTERNAL_LIQUID_HEATER,(WORD*) StandbyTempMsg);
 765   3      
 766   3            SetHeatersStandbyTempTaskParams.DestId = SrcId;
 767   3            SetHeatersStandbyTempTaskParams.TransactionId = TransactionId;
 768   3            
 769   3            SchedulerResumeTask(SetHeatersStandbyTempTaskHandle,0);
 770   3            break;
 771   3          }
 772   2      
 773   2          case GET_HEATERS_STANDBY_TEMPERATURE_MSG:
 774   2            GetHeatersStandbyTempTaskParams.DestId = SrcId;
 775   2            GetHeatersStandbyTempTaskParams.TransactionId = TransactionId;
 776   2            
 777   2            SchedulerResumeTask(GetHeatersStandbyTempTaskHandle,0); 
 778   2            break;
 779   2      
 780   2          case GET_MATERIAL_LEVEL_SENSORS_STATUS_MSG:
 781   2            GetMaterialLevelTaskParams.DestId = SrcId;
 782   2            GetMaterialLevelTaskParams.TransactionId = TransactionId;
 783   2            
 784   2            SchedulerResumeTask(GetMaterialLevelTaskHandle,0);
 785   2            break;
 786   2      
 787   2          case SET_HEADS_VACUUM_PARAMS_MSG:
 788   2          {
 789   3            TSetHeadsVacuumParamsMsg xdata *VacuumMsg = (TSetHeadsVacuumParamsMsg*) &(Message[DATA_INDEX]); 
 790   3            SwapUnsignedShortArray((WORD*) VacuumMsg,(WORD*) VacuumMsg,2);
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 14  

 791   3            Sensors_SetHeadsVacuumParams((WORD*)VacuumMsg);
 792   3            SetHeadsVacuumTaskParams.DestId = SrcId;
 793   3            SetHeadsVacuumTaskParams.TransactionId = TransactionId;
 794   3            
 795   3            SchedulerResumeTask(SetHeadsVacuumTaskHandle,0);
 796   3            break;
 797   3          }
 798   2      
 799   2          case IS_HEADS_VACUUM_OK_MSG:
 800   2            IsHeadsVacuumOkTaskParms.DestId = SrcId;
 801   2            IsHeadsVacuumOkTaskParms.TransactionId = TransactionId;
 802   2            
 803   2            SchedulerResumeTask(IsHeadsVacuumOkTaskHandle,0);
 804   2            break;
 805   2      
 806   2          case GET_VACUUM_SENSORS_STATUS_MSG:
 807   2            GetVacuumSensorTaskParams.DestId = SrcId;
 808   2            GetVacuumSensorTaskParams.TransactionId = TransactionId;
 809   2            
 810   2            SchedulerResumeTask(GetVacuumSensorTaskHandle,0);     
 811   2            break;
 812   2      
 813   2          case GET_AMBIENT_TEMP_SENSOR_STATUS_MSG:
 814   2            GetAmbientTempTaskParams.DestId = SrcId;
 815   2            GetAmbientTempTaskParams.TransactionId = TransactionId;
 816   2            
 817   2            SchedulerResumeTask(GetAmbientTempTaskHandle,0);      
 818   2            break;
 819   2      
 820   2          case SET_ROLLER_ON_OFF_MSG:
 821   2          {
 822   3            TSetRollerOnOffMsg xdata *RollerOnOffMsg = (TSetRollerOnOffMsg*) &(Message[DATA_INDEX]); 
 823   3            SetRollerOnOffTaskParams.DestId = SrcId;
 824   3            SetRollerOnOffTaskParams.TransactionId = TransactionId;
 825   3            SetRollerOnOffTaskParams.RollerOnOff = RollerOnOffMsg->OnOff;
 826   3      
 827   3            SchedulerResumeTask(SetRollerOnOffTaskHandle,0);
 828   3            break;
 829   3          }
 830   2          case SET_ROLLER_SPEED_MSG:
 831   2          {
 832   3            TSetRollerSpeedMsg xdata *RollerSpeedMsg = (TSetRollerSpeedMsg*) &(Message[DATA_INDEX]); 
 833   3            SetRollerSpeedTaskParams.DestId = SrcId;
 834   3            SetRollerSpeedTaskParams.TransactionId = TransactionId;
 835   3            SetRollerSpeedTaskParams.Speed = RollerSpeedMsg->Speed;
 836   3            SwapUnsignedShort(&(SetRollerSpeedTaskParams.Speed));
 837   3      
 838   3            SchedulerResumeTask(SetRollerSpeedTaskHandle,0);
 839   3            break;
 840   3          }
 841   2          case GET_ROLLER_STATUS_MSG:
 842   2            GetRollerStatusTaskParams.DestId = SrcId;
 843   2            GetRollerStatusTaskParams.TransactionId = TransactionId;
 844   2            
 845   2            SchedulerResumeTask(GetRollerStatusTaskHandle,0);
 846   2            break;
 847   2          
 848   2          case SET_BUMPER_PARAMS_MSG:
 849   2          {
 850   3            TSetBumperParamsMsg xdata *BumperMsg = (TSetBumperParamsMsg*) &(Message[DATA_INDEX]);
 851   3            SetBumperParamsTaskParams.DestId = SrcId;
 852   3            SetBumperParamsTaskParams.TransactionId = TransactionId;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 15  

 853   3            SwapUnsignedShort(&(BumperMsg->Sensitivity));
 854   3            SwapUnsignedShort(&(BumperMsg->ResetTime));
 855   3                Bumper_SetParameters(BumperMsg->Sensitivity, BumperMsg->ResetTime, BumperMsg->ImpactCountBeforeErr
             -or);
 856   3      
 857   3            SchedulerResumeTask(SetBumperParamsTaskHandle,0);
 858   3            break;
 859   3          }
 860   2          
 861   2          case OHDB_SOFTWARE_RESET_MSG:
 862   2          {
 863   3            TOHDBAckMsg xdata Msg;
 864   3      
 865   3            Msg.MsgId = ACK_MSG;
 866   3            Msg.RespondedMsgId = OHDB_SOFTWARE_RESET_MSG;
 867   3            Msg.AckStatus = ACK_SUCCESS;
 868   3            
 869   3            // send ack before performing the reset
 870   3            // ------------------------------------
 871   3            while (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SrcId,
 872   3                TransactionId,TRUE) != EDEN_PROTOCOL_NO_ERROR);
 873   3      
 874   3            // wait until the ack msg has been sent
 875   3            // ------------------------------------
 876   3            //TimerDelay(DELAY_BEFORE_RESET);
 877   3      //      #ifdef OCB_SIMULATOR
 878   3      //      ;
 879   3      //      #else
 880   3            TimerDelay(DELAY_BEFORE_RESET);
 881   3      //      #endif
 882   3            // perform the reset
 883   3            // -----------------
 884   3            RSTSRC = 0x02;
 885   3                        
 886   3            break;
 887   3          }
 888   2      
 889   2          case SET_PRINTING_HEADS_PARAMS_MSG:
 890   2          {
 891   3            TSetPrintingHeadsParamsMsg xdata *PrintingParamsMsg = (TSetPrintingHeadsParamsMsg*) &(Message[DATA_INDE
             -X]); 
 892   3            SetPrintingHeadsTaskParams.DestId            = SrcId;
 893   3            SetPrintingHeadsTaskParams.TransactionId     = TransactionId;     
 894   3            SetPrintingHeadsTaskParams.PulseType         = PrintingParamsMsg->PulseType;
 895   3            SetPrintingHeadsTaskParams.DataMultiplier    = PrintingParamsMsg->DataMultiplier;
 896   3            SetPrintingHeadsTaskParams.ResolutionDivider = PrintingParamsMsg->ResolutionDivider;      
 897   3            
 898   3            memcpy(SetPrintingHeadsTaskParams.FirstPulseDwellTime, PrintingParamsMsg->FirstPulseDwellTime, NUM_OF_H
             -EADS);
 899   3            memcpy(SetPrintingHeadsTaskParams.FirstPulseFallTime,  PrintingParamsMsg->FirstPulseFallTime,  NUM_OF_H
             -EADS);
 900   3            memcpy(SetPrintingHeadsTaskParams.SecondPulseWidth,    PrintingParamsMsg->SecondPulseWidth,    NUM_OF_H
             -EADS);
 901   3            memcpy(SetPrintingHeadsTaskParams.DelayToSecondPulse,  PrintingParamsMsg->DelayToSecondPulse,  NUM_OF_H
             -EADS);
 902   3      
 903   3            SchedulerResumeTask(SetPrintingHeadsParamsTaskHandle, 0);
 904   3            break;
 905   3          }
 906   2      
 907   2          case RESET_DRIVER_CIRCUIT_MSG:
 908   2            ResetDriverCircuitTaskParams.DestId = SrcId;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 16  

 909   2            ResetDriverCircuitTaskParams.TransactionId = TransactionId;
 910   2            
 911   2            SchedulerResumeTask(ResetDriverCircuitTaskHandle,0);
 912   2            break;
 913   2        
 914   2          case SET_PRINTING_PASS_PARAMS_MSG:
 915   2          {
 916   3            TSetPrintingPassParamsMsg xdata *PassParamsMsg = (TSetPrintingPassParamsMsg*) &(Message[DATA_INDEX]);
 917   3            SetPrintingPassTaskParams.DestId        = SrcId;
 918   3            SetPrintingPassTaskParams.TransactionId = TransactionId;
 919   3            
 920   3            SetPrintingPassTaskParams.StartPeg      = PassParamsMsg->StartPeg;
 921   3            SwapUnsignedShort(&(SetPrintingPassTaskParams.StartPeg));
 922   3            
 923   3            SetPrintingPassTaskParams.EndPeg = PassParamsMsg->EndPeg;
 924   3            SwapUnsignedShort(&(SetPrintingPassTaskParams.EndPeg));
 925   3            
 926   3            SetPrintingPassTaskParams.NumOfFires = PassParamsMsg->NumOfFires;
 927   3            SwapUnsignedShort(&(SetPrintingPassTaskParams.NumOfFires));
 928   3            
 929   3            SetPrintingPassTaskParams.BumperStartPeg = PassParamsMsg->BumperStartPeg;
 930   3            SwapUnsignedShort(&(SetPrintingPassTaskParams.BumperStartPeg));
 931   3            
 932   3            SetPrintingPassTaskParams.BumperEndPeg = PassParamsMsg->BumperEndPeg;
 933   3            SwapUnsignedShort(&(SetPrintingPassTaskParams.BumperEndPeg));
 934   3      
 935   3            SchedulerResumeTask(SetPrintingPassParamsTaskHandle, 0);
 936   3            break;
 937   3          }
 938   2      
 939   2          case ENABLE_PRINTING_CIRCUITRY_MSG:
 940   2            EnablePrintingCircuitryTaskParams.DestId = SrcId;
 941   2            EnablePrintingCircuitryTaskParams.TransactionId = TransactionId;
 942   2            
 943   2            SchedulerResumeTask(EnablePrintingCircuitryTaskHandle,0);
 944   2            break;
 945   2          
 946   2          case DISABLE_PRINTING_CIRCUITRY_MSG:
 947   2            DisablePrintingCircuitryTaskParams.DestId = SrcId;
 948   2            DisablePrintingCircuitryTaskParams.TransactionId = TransactionId;
 949   2            
 950   2            SchedulerResumeTask(DisablePrintingCircuitryTaskHandle,0);
 951   2        
 952   2            break;
 953   2      
 954   2          case OHDB_GET_A2D_READINGS_MSG:
 955   2            OHDBGetA2DReadingsTaskParams.DestId = SrcId;
 956   2            OHDBGetA2DReadingsTaskParams.TransactionId = TransactionId;
 957   2            
 958   2            SchedulerResumeTask(OHDBGetA2DReadingsTaskHandle,0);
 959   2            break;
 960   2      
 961   2          case GET_HEADS_DRIVER_SOFTWARE_VERSION_MSG:
 962   2            GetSoftwareVersionTaskParams.DestId = SrcId;
 963   2            GetSoftwareVersionTaskParams.TransactionId = TransactionId;
 964   2            
 965   2            SchedulerResumeTask(GetSoftwareVersionTaskHandle,0);
 966   2            break;
 967   2      
 968   2          case GET_OHDB_A2D_SW_VERSION_MSG:
 969   2            OHDBGetA2DSWVersionTaskParams.DestId = SrcId;
 970   2            OHDBGetA2DSWVersionTaskParams.TransactionId = TransactionId;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 17  

 971   2      
 972   2            SchedulerResumeTask(OHDBGetA2DSWVersionTaskHandle,0);
 973   2              break;
 974   2      
 975   2          case GET_HEADS_DRIVER_HARDWARE_VERSION_MSG:
 976   2            GetHardwareVersionTaskParams.DestId = SrcId;
 977   2            GetHardwareVersionTaskParams.TransactionId = TransactionId;
 978   2            
 979   2            SchedulerResumeTask(GetHardwareVersionTaskHandle,0);
 980   2            break;
 981   2          
 982   2          case SET_HEATERS_ON_OFF_MSG:
 983   2          {   
 984   3            TSetHeatersOnOffMsg xdata *SetHeatersOnOff = (TSetHeatersOnOffMsg*) &(Message[DATA_INDEX]);
 985   3                SwapUnsignedShort(&(SetHeatersOnOff->HeatersMask));
 986   3            HeaterControlSetOnOff(SetHeatersOnOff->OnOff);
 987   3            
 988   3            SetHeatersOnOffTaskParams.DestId = SrcId;
 989   3            SetHeatersOnOffTaskParams.TransactionId = TransactionId;
 990   3            
 991   3            SchedulerResumeTask(SetHeatersOnOffTaskHandle,0);
 992   3      
 993   3            break;
 994   3          }
 995   2          
 996   2          case SET_BUMPER_IMPACT_ON_OFF:
 997   2          {
 998   3            TSetBumperImpactOnOffMsg xdata *SetBumperOnOff = (TSetBumperImpactOnOffMsg*) &(Message[DATA_INDEX]);
 999   3            Bumper_SetOnOff(SetBumperOnOff->OnOff);
1000   3            
1001   3            SetBumperImpactOnOffTaskParams.DestId = SrcId;
1002   3            SetBumperImpactOnOffTaskParams.TransactionId = TransactionId;
1003   3            
1004   3            SchedulerResumeTask(SetBumperImpactOnOffTaskHandle,0);
1005   3      
1006   3            break;
1007   3          }
1008   2      
1009   2          case RESET_DRIVER_STATE_MACHINE_MSG:
1010   2            ResetDriverStateTaskParams.DestId = SrcId;
1011   2            ResetDriverStateTaskParams.TransactionId = TransactionId;
1012   2            
1013   2            SchedulerResumeTask(ResetDriverStateTaskHandle,0);
1014   2            break;
1015   2          
1016   2          case APPPLY_DEFAULT_PRINT_PARAMS_MSG:
1017   2            ApplyDefaultParamsTaskParams.DestId        = SrcId;
1018   2            ApplyDefaultParamsTaskParams.TransactionId = TransactionId;
1019   2            
1020   2            SchedulerResumeTask(ApplyDefaultParamsTaskHandle,0);
1021   2            break;
1022   2          
1023   2          case FIRE_ALL_MSG:
1024   2          {
1025   3            TFireAllMsg xdata *FireAllMsg = (TFireAllMsg*) &(Message[DATA_INDEX]);
1026   3            SwapUnsignedShort(&(FireAllMsg->FireAllFrequency));
1027   3            SwapUnsignedShort(&(FireAllMsg->FireAllTime));
1028   3            SwapUnsignedShort(&(FireAllMsg->Head));
1029   3            SwapUnsignedShort(&(FireAllMsg->NumOfFires));
1030   3            PrintDrv_SetFireAllParams(FireAllMsg->FireAllFrequency, FireAllMsg->FireAllTime,
1031   3                                      FireAllMsg->Head,FireAllMsg->NumOfFires,SrcId, TransactionId);
1032   3            
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 18  

1033   3            SchedulerResumeTask(FireAllTaskHandle,0);
1034   3            break;
1035   3          }
1036   2      
1037   2          case SET_PRINTING_HEADS_VOLTAGES_MSG:
1038   2          {
1039   3              TSetPrintingHeadsVoltagesMsg xdata *VolatgesMsg = (TSetPrintingHeadsVoltagesMsg*) &(Message[DATA_INDE
             -X]);
1040   3            SetHeadVoltageTaskParams.DestId = SrcId;
1041   3            SetHeadVoltageTaskParams.TransactionId = TransactionId;
1042   3            memcpy(SetHeadVoltageTaskParams.PotentiometerValues,VolatgesMsg->PotentiometerValues,8);
1043   3      
1044   3            SchedulerResumeTask(SetHeadVoltageTaskHandle,0);
1045   3              break;
1046   3          }
1047   2          
1048   2          case GET_PRINTING_HEADS_VOLTAGES_MSG:
1049   2          {
1050   3            GetHeadVoltageTaskParams.DestId = SrcId;
1051   3            GetHeadVoltageTaskParams.TransactionId = TransactionId;
1052   3            
1053   3            SchedulerResumeTask(GetHeadVoltageTaskHandle,0);
1054   3              break;
1055   3          }
1056   2      
1057   2          case GET_POWER_SUPPLIES_VOLTAGES_MSG:
1058   2          {
1059   3            GetPowerSuppliesTaskParams.DestId = SrcId;
1060   3            GetPowerSuppliesTaskParams.TransactionId = TransactionId;
1061   3            
1062   3            SchedulerResumeTask(GetPowerSuppliesTaskHandle,0);
1063   3              break;
1064   3          }
1065   2      
1066   2          case SET_HEAD_DATA_MSG:
1067   2          {
1068   3              TSetHeadDataMsg xdata *SetHeadDataMsg = (TSetHeadDataMsg*) &(Message[DATA_INDEX]);
1069   3      
1070   3            if (SchedulerGetTaskState(HeadData_GetHeadDataTaskHandle()) == TASK_SUSPENDED)
1071   3            {
1072   4              SwapUnsignedShort(&(SetHeadDataMsg->A2DValueFor60C));
1073   4              SwapUnsignedShort(&(SetHeadDataMsg->A2DValueFor80C));
1074   4              SwapUnsignedLong((unsigned long *)&(SetHeadDataMsg->Model10KHzLineGain));
1075   4              SwapUnsignedLong((unsigned long *)&(SetHeadDataMsg->Model10KHzLineOffset));
1076   4              SwapUnsignedLong((unsigned long *)&(SetHeadDataMsg->Model20KHzLineGain));
1077   4              SwapUnsignedLong((unsigned long *)&(SetHeadDataMsg->Model20KHzLineOffset));
1078   4              SwapUnsignedLong((unsigned long *)&(SetHeadDataMsg->Support10KHzLineGain));
1079   4              SwapUnsignedLong((unsigned long *)&(SetHeadDataMsg->Support10KHzLineOffset));
1080   4              SwapUnsignedLong((unsigned long *)&(SetHeadDataMsg->Support20KHzLineGain));
1081   4              SwapUnsignedLong((unsigned long *)&(SetHeadDataMsg->Support20KHzLineOffset));
1082   4              SwapUnsignedLong((unsigned long *)&(SetHeadDataMsg->XOffset));
1083   4              SwapUnsignedLong((unsigned long *)&(SetHeadDataMsg->ProductionDate));
1084   4              
1085   4              HeadData_SetHeadDataTaskParams(SrcId, TransactionId, SetHeadDataMsg->HeadNum, (BYTE *)&(SetHeadDataMsg
             -->A2DValueFor60C));
1086   4              
1087   4              SchedulerResumeTask(HeadData_GetHeadDataTaskHandle(),0);
1088   4                }
1089   3            else
1090   3            {
1091   4              SetHeadDataNackTaskParams.DestId = SrcId;
1092   4              SetHeadDataNackTaskParams.TransactionId = TransactionId;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 19  

1093   4              SchedulerResumeTask(SetHeadDataNackTaskHandle,0);  
1094   4            }
1095   3              break;
1096   3          }
1097   2         
1098   2          case GET_HEAD_DATA_MSG:
1099   2          {
1100   3            TGetHeadDataMsg xdata *GetHeadDataMsg = (TGetHeadDataMsg*) &(Message[DATA_INDEX]);
1101   3            
1102   3            GetHeadDataTaskParams.DestId = SrcId;
1103   3            GetHeadDataTaskParams.TransactionId = TransactionId;
1104   3            GetHeadDataTaskParams.HeadNum = GetHeadDataMsg->HeadNum;
1105   3            
1106   3            SchedulerResumeTask(GetHeadDataTaskHandle,0);
1107   3            break;
1108   3          }
1109   2      
1110   2          case SET_MATERIAL_COOLING_FAN_ON_OFF_MSG:
1111   2          {
1112   3            TSetMaterialCoolingFansOnOffMsg xdata *FansMsg = (TSetMaterialCoolingFansOnOffMsg*) &(Message[DATA_INDE
             -X]);
1113   3            SetMaterialCoolingFansOnOff(FansMsg->OnOff, FansMsg->OnPeriod);
1114   3            SetMaterialCoolingFansTaskParams.DestId = SrcId;
1115   3            SetMaterialCoolingFansTaskParams.TransactionId = TransactionId;
1116   3            
1117   3            SchedulerResumeTask(SetMaterialCoolingFansTaskHandle,0);       
1118   3            break;
1119   3          }
1120   2      
1121   2          case GET_FIRE_ALL_STATUS_MSG:
1122   2          {
1123   3            GetFireAllStatusTaskParams.DestId = SrcId;
1124   3            GetFireAllStatusTaskParams.TransactionId = TransactionId;
1125   3            
1126   3            SchedulerResumeTask(GetFireAllStatusTaskHandle,0);       
1127   3            break;
1128   3          }
1129   2      
1130   2          case SET_DEBUG_MODE_MSG:
1131   2          {
1132   3            TSetDebugModeMsg xdata *DebugModeMsg = (TSetDebugModeMsg*) &(Message[DATA_INDEX]);
1133   3            
1134   3            SetDebugModeTaskParams.DestId = SrcId;
1135   3            SetDebugModeTaskParams.TransactionId = TransactionId;
1136   3            
1137   3            // If Eden is NOT in debug mode: enable the watchdog.
1138   3            if ((DebugModeMsg->DebugMode) == 0)
1139   3              EnableDisableCommLossTask(TRUE); 
1140   3            else 
1141   3              EnableDisableCommLossTask(FALSE); 
1142   3            
1143   3            SchedulerResumeTask(SetDebugModeTaskHandle,0);      
1144   3            break; 
1145   3          }
1146   2      
1147   2          case SET_BUMPER_PEG_ON_OFF:
1148   2          {
1149   3            TSetBumperPegOnOffMsg xdata *BumperPegMsg = (TSetBumperPegOnOffMsg*) &(Message[DATA_INDEX]); 
1150   3            
1151   3            SetBumperPegOnOffTaskParams.OnOff = BumperPegMsg->OnOff; 
1152   3            SetBumperPegOnOffTaskParams.DestId = SrcId;
1153   3            SetBumperPegOnOffTaskParams.TransactionId = TransactionId;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 20  

1154   3            
1155   3            SchedulerResumeTask(SetBumperPegOnOffTaskHandle,0);
1156   3            break;
1157   3          }
1158   2      
1159   2          case SET_VIRTUAL_ENCODER:
1160   2          {
1161   3            TSetVirtualEncoderMsg xdata *VirtualEncoderMsg = (TSetVirtualEncoderMsg*) &(Message[DATA_INDEX]); 
1162   3            SetVirtualEncoderTaskParams.OnOff = VirtualEncoderMsg->OnOff; 
1163   3            SetVirtualEncoderTaskParams.DestId = SrcId;
1164   3            SetVirtualEncoderTaskParams.TransactionId = TransactionId;
1165   3            SchedulerResumeTask(SetVirtualEncoderTaskHandle,0);
1166   3            break;
1167   3          }
1168   2      
1169   2          case WRITE_DATA_TO_XILINX_MSG:
1170   2          {
1171   3            TWriteDataToXilinxMsg xdata *WriteMsg = (TWriteDataToXilinxMsg*) &(Message[DATA_INDEX]);
1172   3            XilinxWriteTaskParams.DestId = SrcId;
1173   3            XilinxWriteTaskParams.TransactionId = TransactionId;
1174   3            XilinxWriteTaskParams.Address = WriteMsg->Address;
1175   3            XilinxWriteTaskParams.Data = WriteMsg->Data;
1176   3            SwapUnsignedShort(&(XilinxWriteTaskParams.Data));
1177   3          
1178   3            SchedulerResumeTask(XilinxWriteTaskHandle,0);
1179   3            break;
1180   3          }
1181   2             
1182   2          case SET_POTENIOMETER_VALUE_MSG:
1183   2          {
1184   3            TOHDBSetPotentiometerValueMsg xdata *PotentiometerMsg = (TOHDBSetPotentiometerValueMsg*) &(Message[DATA
             -_INDEX]);
1185   3            OHDBPotentiometerTaskParams.DestId = SrcId;
1186   3            OHDBPotentiometerTaskParams.TransactionId = TransactionId;
1187   3            OHDBPotentiometerTaskParams.HeadNum = PotentiometerMsg->HeadNum;
1188   3            OHDBPotentiometerTaskParams.Value = PotentiometerMsg->PotentiometerValue;
1189   3      
1190   3            SchedulerResumeTask(OHDBPotentiometerWriteTaskHandle,0);
1191   3            break;
1192   3          }
1193   2      
1194   2          case WRITE_DATA_TO_E2PROM_MSG:
1195   2          {
1196   3            TWriteDataToE2PROMMsg xdata *WriteMsg = (TWriteDataToE2PROMMsg*) &(Message[DATA_INDEX]);
1197   3            E2PROMWriteTaskParams.DestId = SrcId;
1198   3            E2PROMWriteTaskParams.TransactionId = TransactionId;
1199   3            E2PROMWriteTaskParams.DeviceNum = WriteMsg->DeviceNum;
1200   3            E2PROMWriteTaskParams.Address = WriteMsg->Address;
1201   3            SwapUnsignedShort(&(E2PROMWriteTaskParams.Address));
1202   3            E2PROMWriteTaskParams.Data = WriteMsg->Data;
1203   3      
1204   3            SchedulerResumeTask(E2PROMWriteTaskHandle,0);
1205   3            break;
1206   3          }
1207   2      
1208   2          case READ_FROM_E2PROM_MSG:
1209   2          {   
1210   3            TReadFromE2PROMMsg xdata *ReadMsg = (TReadFromE2PROMMsg*) &(Message[DATA_INDEX]);
1211   3            E2PROMReadTaskParams.DestId = SrcId;
1212   3            E2PROMReadTaskParams.TransactionId = TransactionId;
1213   3            E2PROMReadTaskParams.DeviceNum = ReadMsg->DeviceNum;
1214   3            E2PROMReadTaskParams.Address = ReadMsg->Address;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 21  

1215   3            SwapUnsignedShort(&(E2PROMReadTaskParams.Address));
1216   3          
1217   3            SchedulerResumeTask(E2PROMReadTaskHandle,0);
1218   3            break;
1219   3          }
1220   2      
1221   2          case READ_FROM_XILINX_MSG:
1222   2          {     
1223   3            TReadFromXilinxMsg xdata *ReadMsg = (TReadFromXilinxMsg*) &(Message[DATA_INDEX]);         
1224   3            XilinxReadTaskParams[FreeCellIndex].DestId = SrcId;
1225   3            XilinxReadTaskParams[FreeCellIndex].TransactionId = TransactionId;
1226   3            XilinxReadTaskParams[FreeCellIndex].Address = ReadMsg->Address;     
1227   3            FreeCellIndex = (FreeCellIndex+1)%6;
1228   3            SchedulerResumeTask(XilinxReadTaskHandle,SchedulerGetTaskArg(XilinxReadTaskHandle));  
1229   3            break;
1230   3          }
1231   2          
1232   2          default:
1233   2            break;
1234   2        }
1235   1      }
1236          
1237          
1238          /****************************************************************************
1239           *
1240           *  NAME        : IsHeadTempOkTask
1241           *
1242           *  DESCRIPTION : This task sends "Heads Temperature status" reply message
1243           *                if the sending was successful it suspend itself if not
1244           *                it will try again when the scheduler calls it.
1245           ****************************************************************************/
1246          void IsHeadTempOkTask (BYTE Arg)
1247          {
1248   1        TOHDBHeadsTemperatureOkMsg xdata Msg;
1249   1        
1250   1        Msg.MsgId = HEADS_TEMPERATURES_OK_MSG;
1251   1        Msg.TemperatureStatus = HeaterIsTempraturesOK(&Msg.HeadNum, &Msg.Temperature, &Msg.ErrDescription);
1252   1        
1253   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBHeadsTemperatureOkMsg),IsHeadTempOkTaskParams.DestId,
1254   1            IsHeadTempOkTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
1255   1          SchedulerSuspendTask(-1);
1256   1        else
1257   1          SchedulerLeaveTask(Arg);  
1258   1      }
1259          
1260          
1261          
1262          /****************************************************************************
1263           *
1264           *  NAME        : OHDBGetA2DReadingsTask
1265           *
1266           *  DESCRIPTION : This task sends "A2D Readings" reply message
1267           *                if the sending was successful it suspend itself if not
1268           *                it will try again when the scheduler calls it.
1269           ****************************************************************************/
1270          void OHDBGetA2DReadingsTask(BYTE Arg)
1271          {
1272   1        TOHDBA2DReadingsMsg xdata Msg;
1273   1      
1274   1        Msg.MsgId = OHDB_A2D_READINGS_MSG;
1275   1        SpiA2D_GetBlockReadings(ANALOG_IN_1, ANALOG_IN_24, Msg.Readings);
1276   1        SwapUnsignedShortArray(Msg.Readings,Msg.Readings,24);
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 22  

1277   1      
1278   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBA2DReadingsMsg),OHDBGetA2DReadingsTaskParams.DestId,
1279   1            OHDBGetA2DReadingsTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
1280   1          SchedulerSuspendTask(-1);
1281   1        else
1282   1          SchedulerLeaveTask(Arg);
1283   1      
1284   1      }
1285          
1286          /****************************************************************************
1287           *
1288           *  NAME        : XilinxWriteTask
1289           *
1290           *  DESCRIPTION : This task writes the data recieved to the xilinx
1291           *                After a success write it suspends itself
1292           ****************************************************************************/
1293          void XilinxWriteTask(BYTE Arg)
1294          {
1295   1        enum{
1296   1        SEND_WRITE_CMD,
1297   1        WAIT_FOR_OP_DONE,
1298   1        SEND_ACK
1299   1        };
1300   1      
1301   1        switch (Arg)
1302   1        {   
1303   2          case SEND_WRITE_CMD:
1304   2            SchedulerLeaveTask(SEND_ACK);
1305   2            break;/*
1306   2            if (XilinxWrite((TXilinxMessage*)&XilinxWriteTaskParams) == XILINX_NO_ERROR)
1307   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
1308   2            else
1309   2              SchedulerLeaveTask(SEND_WRITE_CMD);
1310   2            break;*/
1311   2      
1312   2      
1313   2          case WAIT_FOR_OP_DONE:
1314   2            if (XilinxGetWriteActionStatus() != XILINX_BUSY)
1315   2              SchedulerLeaveTask(SEND_ACK);
1316   2            else
1317   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
1318   2            break;
1319   2      
1320   2          case SEND_ACK:
1321   2          { 
1322   3            TOHDBAckMsg xdata Msg;
1323   3      
1324   3            Msg.MsgId = ACK_MSG;
1325   3            Msg.RespondedMsgId = WRITE_DATA_TO_XILINX_MSG;
1326   3            Msg.AckStatus = ACK_SUCCESS;
1327   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),XilinxWriteTaskParams.DestId,
1328   3                XilinxWriteTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
1329   3            {
1330   4              SchedulerLeaveTask(SEND_WRITE_CMD);
1331   4              SchedulerSuspendTask(-1);
1332   4            }
1333   3            else
1334   3              SchedulerLeaveTask(SEND_ACK);
1335   3            break;
1336   3          }
1337   2      
1338   2           default:
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 23  

1339   2             SchedulerLeaveTask(SEND_ACK);
1340   2             break;
1341   2      
1342   2         }
1343   1         return;
1344   1      
1345   1        
1346   1      }
1347          
1348          /****************************************************************************
1349           *
1350           *  NAME        : PotentiometerWriteTask
1351           *
1352           *  DESCRIPTION : This task writes the data recieved to the potentiometer device
1353           *                After a success write it suspends itself
1354           ****************************************************************************/
1355          void PotentiometerWriteTask(BYTE Arg)
1356          {
1357   1        enum{
1358   1        SEND_WRITE_CMD,
1359   1        WAIT_FOR_OP_DONE,
1360   1        SEND_ACK
1361   1        };
1362   1      
1363   1        switch (Arg)
1364   1        {
1365   2        
1366   2          case SEND_WRITE_CMD:
1367   2            if (OHDBPotenmtrWriteValue(OHDBPotentiometerTaskParams.HeadNum, OHDBPotentiometerTaskParams.Value) == O
             -HDB_POTENMTR_NO_ERROR)
1368   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
1369   2            else
1370   2              SchedulerLeaveTask(SEND_WRITE_CMD);
1371   2            break;
1372   2      
1373   2          case WAIT_FOR_OP_DONE:
1374   2            if (OHDBPotenmtrGetWriteStatus(OHDBPotentiometerTaskParams.HeadNum) != OHDB_POTENMTR_BUSY)
1375   2              SchedulerLeaveTask(SEND_ACK);
1376   2            else
1377   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
1378   2            break;
1379   2      
1380   2          case SEND_ACK:
1381   2          { 
1382   3            TOHDBAckMsg xdata Msg;
1383   3      
1384   3            Msg.MsgId = ACK_MSG;
1385   3            Msg.RespondedMsgId = SET_POTENIOMETER_VALUE_MSG;
1386   3            Msg.AckStatus = ACK_SUCCESS;
1387   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),OHDBPotentiometerTaskParams.DestId,
1388   3                OHDBPotentiometerTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
1389   3            {
1390   4              SchedulerLeaveTask(SEND_WRITE_CMD);
1391   4              SchedulerSuspendTask(-1);
1392   4            }
1393   3            else
1394   3              SchedulerLeaveTask(SEND_ACK);
1395   3            break;
1396   3          }
1397   2      
1398   2           default:
1399   2             SchedulerLeaveTask(SEND_WRITE_CMD);
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 24  

1400   2             break;
1401   2      
1402   2         }
1403   1         return;
1404   1      }
1405          
1406          
1407          /****************************************************************************
1408           *
1409           *  NAME        : E2PROMWriteTask
1410           *
1411           *  DESCRIPTION : This task writes the data recieved to the an E2PROM device
1412           *                After a success write it suspends itself
1413           ****************************************************************************/
1414          void E2PROMWriteTask(BYTE Arg)
1415          {
1416   1        enum{
1417   1        SEND_ENABLE_CMD,
1418   1        WAIT_FOR_ENABLE_OP_DONE,
1419   1        SEND_WRITE_CMD,
1420   1        WAIT_FOR_WRITE_OP_DONE,
1421   1        SEND_ACK
1422   1        };
1423   1        
1424   1        switch (Arg)
1425   1        {     
1426   2          case SEND_ENABLE_CMD:
1427   2            if (E2PROMWriteEnable(E2PROMWriteTaskParams.DeviceNum) == E2PROM_NO_ERROR)
1428   2              SchedulerLeaveTask(WAIT_FOR_ENABLE_OP_DONE);
1429   2            else
1430   2              SchedulerLeaveTask(SEND_ENABLE_CMD);
1431   2            break;
1432   2      
1433   2          case WAIT_FOR_ENABLE_OP_DONE:
1434   2            if (E2PROMGetWriteStatus(E2PROMWriteTaskParams.DeviceNum) != E2PROM_BUSY)
1435   2              SchedulerLeaveTask(SEND_WRITE_CMD);
1436   2            else
1437   2              SchedulerLeaveTask(WAIT_FOR_ENABLE_OP_DONE);
1438   2            break;
1439   2      
1440   2          case SEND_WRITE_CMD:
1441   2            if (E2PROMWrite(E2PROMWriteTaskParams.DeviceNum,E2PROMWriteTaskParams.Address,
1442   2                  E2PROMWriteTaskParams.Data) == E2PROM_NO_ERROR)
1443   2              SchedulerLeaveTask(WAIT_FOR_WRITE_OP_DONE);
1444   2            else
1445   2              SchedulerLeaveTask(SEND_WRITE_CMD);
1446   2            break;
1447   2      
1448   2          case WAIT_FOR_WRITE_OP_DONE:
1449   2            if (E2PROMGetWriteStatus(E2PROMWriteTaskParams.DeviceNum) != E2PROM_BUSY)
1450   2              SchedulerLeaveTask(SEND_ACK);
1451   2            else
1452   2              SchedulerLeaveTask(WAIT_FOR_WRITE_OP_DONE);
1453   2            break;
1454   2      
1455   2          case SEND_ACK:
1456   2          { 
1457   3            TOHDBAckMsg xdata Msg;
1458   3      
1459   3            Msg.MsgId = ACK_MSG;
1460   3            Msg.RespondedMsgId = WRITE_DATA_TO_E2PROM_MSG;
1461   3            Msg.AckStatus = ACK_SUCCESS;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 25  

1462   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),E2PROMWriteTaskParams.DestId,
1463   3                E2PROMWriteTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
1464   3            {
1465   4              SchedulerLeaveTask(SEND_ENABLE_CMD);
1466   4              SchedulerSuspendTask(-1);
1467   4            }
1468   3            else
1469   3              SchedulerLeaveTask(SEND_ACK);
1470   3            break;
1471   3          }
1472   2      
1473   2           default:
1474   2             SchedulerLeaveTask(SEND_ENABLE_CMD);
1475   2             break;
1476   2      
1477   2         }
1478   1         return;
1479   1      }
1480          
1481               
1482          /****************************************************************************
1483           *
1484           *  NAME        : E2PROMReadTask
1485           *
1486           *  DESCRIPTION : This task reads from an E2PROM device and sends the data.
1487           *                After a success it suspends itself
1488           ****************************************************************************/
1489          void E2PROMReadTask(BYTE Arg)
1490          {
1491   1        enum{
1492   1        SEND_READ_CMD,
1493   1        WAIT_FOR_OP_DONE,
1494   1        SEND_RESPONSE
1495   1        };
1496   1      
1497   1        static BYTE Data;
1498   1      
1499   1        switch (Arg)
1500   1        {
1501   2          case SEND_READ_CMD:
1502   2            if (E2PROMReadByte(E2PROMReadTaskParams.DeviceNum,E2PROMReadTaskParams.Address) == E2PROM_NO_ERROR)
1503   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
1504   2            else
1505   2              SchedulerLeaveTask(SEND_READ_CMD);
1506   2            break;
1507   2      
1508   2          case WAIT_FOR_OP_DONE:
1509   2            if (E2PROMGetReceivedData(E2PROMReadTaskParams.DeviceNum,&Data,1) != E2PROM_BUSY)
1510   2              SchedulerLeaveTask(SEND_RESPONSE);
1511   2            else
1512   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
1513   2            break;
1514   2      
1515   2          case SEND_RESPONSE:
1516   2          { 
1517   3            TE2PROMDataMsg xdata Msg;
1518   3      
1519   3            Msg.MsgId = E2PROM_DATA_MSG;
1520   3            Msg.Address = E2PROMReadTaskParams.Address;
1521   3            SwapUnsignedShort(&(Msg.Address));
1522   3            Msg.Data = Data;
1523   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TE2PROMDataMsg),E2PROMReadTaskParams.DestId,
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 26  

1524   3                E2PROMReadTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
1525   3            {
1526   4              SchedulerLeaveTask(SEND_READ_CMD);
1527   4              SchedulerSuspendTask(-1);
1528   4            }
1529   3            else
1530   3              SchedulerLeaveTask(SEND_RESPONSE);
1531   3            break;
1532   3          }
1533   2       
1534   2          default:
1535   2            SchedulerLeaveTask(SEND_READ_CMD);
1536   2            break;
1537   2      
1538   2         }
1539   1         return;
1540   1      
1541   1      }
1542          
1543          
1544          /****************************************************************************
1545           *
1546           *  NAME        : XilinxReadTask
1547           *
1548           *  DESCRIPTION : This task reads from the Xilinx device and sends the data.
1549           *                After a success it suspends itself
1550           ****************************************************************************/
1551          void XilinxReadTask(BYTE Arg)
1552          {
1553   1        enum{
1554   1        SEND_READ_CMD,
1555   1        WAIT_FOR_OP_DONE,
1556   1        SEND_RESPONSE
1557   1        };
1558   1        switch (Arg)
1559   1        {
1560   2          case SEND_READ_CMD:
1561   2            SchedulerLeaveTask(SEND_RESPONSE);
1562   2            break;/*
1563   2            if (XilinxRead(XilinxReadTaskParams[CurrMsgIndex].Address) == XILINX_NO_ERROR)        
1564   2                SchedulerLeaveTask(WAIT_FOR_OP_DONE);       
1565   2            else
1566   2              SchedulerLeaveTask(SEND_READ_CMD);
1567   2            break;*/
1568   2      
1569   2          case WAIT_FOR_OP_DONE:
1570   2            if (XilinxGetReceivedData((BYTE*)&XilinxReadTaskParams[CurrMsgIndex].Data)  != XILINX_BUSY)
1571   2              SchedulerLeaveTask(SEND_RESPONSE);
1572   2            else
1573   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
1574   2            break;
1575   2      
1576   2          case SEND_RESPONSE:
1577   2          { 
1578   3            TXilinxDataMsg xdata Msg;
1579   3      
1580   3            Msg.MsgId = XILINX_DATA_MSG;
1581   3            Msg.Address = XilinxReadTaskParams[CurrMsgIndex].Address;
1582   3            Msg.Data = XilinxReadTaskParams[CurrMsgIndex].Data;
1583   3            SwapUnsignedShort(&(Msg.Data));
1584   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TXilinxDataMsg),XilinxReadTaskParams[CurrMsgIndex].DestId,
1585   3                XilinxReadTaskParams[CurrMsgIndex].TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 27  

1586   3            {
1587   4                CurrMsgIndex = (CurrMsgIndex+1)%6;
1588   4              if(CurrMsgIndex==FreeCellIndex) //no messages to handle
1589   4              {
1590   5                SchedulerLeaveTask(SEND_READ_CMD);        
1591   5                SchedulerSuspendTask(-1);
1592   5              }
1593   4              else
1594   4                SchedulerLeaveTask(SEND_READ_CMD);
1595   4            }
1596   3            else
1597   3              SchedulerLeaveTask(SEND_RESPONSE);
1598   3            break;
1599   3          }
1600   2       
1601   2          default:
1602   2            SchedulerLeaveTask(SEND_READ_CMD);
1603   2            break;
1604   2      
1605   2         }
1606   1         return;
1607   1      
1608   1      }
1609          
1610          
1611          /****************************************************************************
1612           *
1613           *  NAME        : SetRollerOnOffTask
1614           *
1615           *  DESCRIPTION : This task sets the roller on or off
1616           *                After the operation is done it sends Ack msg and suspends itself
1617           ****************************************************************************/
1618          void SetRollerOnOffTask(BYTE Arg)
1619          {
1620   1        enum{
1621   1        ENABLE_ROLLER_DRIVER,
1622   1        WAIT_FOR_ENABLE_OP_DONE,
1623   1        SET_ROLLER_ON_OFF,
1624   1        WAIT_FOR_ON_OFF_OP_DONE,
1625   1        SEND_ACK
1626   1        };
1627   1      
1628   1        switch (Arg)
1629   1        {
1630   2          case ENABLE_ROLLER_DRIVER:
1631   2            // if it is turn off command, the 'roller enable' can be skipped  
1632   2            if (!SetRollerOnOffTaskParams.RollerOnOff)
1633   2              SchedulerLeaveTask(SET_ROLLER_ON_OFF);
1634   2            else
1635   2            {
1636   3              if (Roller_EnableDriver(SetRollerOnOffTaskParams.RollerOnOff) == ROLLER_NO_ERROR)
1637   3                SchedulerLeaveTask(WAIT_FOR_ENABLE_OP_DONE);
1638   3              else
1639   3                SchedulerLeaveTask(ENABLE_ROLLER_DRIVER);
1640   3            }
1641   2            break;
1642   2      
1643   2          case WAIT_FOR_ENABLE_OP_DONE:
1644   2            if (Roller_IsSetOperationDone() == ROLLER_NO_ERROR)
1645   2              SchedulerLeaveTask(SET_ROLLER_ON_OFF);
1646   2            else
1647   2              SchedulerLeaveTask(WAIT_FOR_ENABLE_OP_DONE);
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 28  

1648   2            break;
1649   2      
1650   2          case SET_ROLLER_ON_OFF:
1651   2            if (Roller_SetOnOff(SetRollerOnOffTaskParams.RollerOnOff) == ROLLER_NO_ERROR)
1652   2              SchedulerLeaveTask(WAIT_FOR_ON_OFF_OP_DONE);
1653   2            else
1654   2              SchedulerLeaveTask(SET_ROLLER_ON_OFF);
1655   2            break;
1656   2      
1657   2          case WAIT_FOR_ON_OFF_OP_DONE:
1658   2            if (Roller_IsSetOperationDone() == ROLLER_NO_ERROR)
1659   2              SchedulerLeaveTask(SEND_ACK);
1660   2            else
1661   2              SchedulerLeaveTask(WAIT_FOR_ON_OFF_OP_DONE);
1662   2            break;
1663   2      
1664   2          case SEND_ACK:
1665   2          { 
1666   3            TOHDBAckMsg xdata Msg;
1667   3      
1668   3            Msg.MsgId = ACK_MSG;
1669   3            Msg.RespondedMsgId = SET_ROLLER_ON_OFF_MSG;
1670   3            Msg.AckStatus = ACK_SUCCESS;
1671   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetRollerOnOffTaskParams.DestId,
1672   3                SetRollerOnOffTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
1673   3            {
1674   4              SchedulerLeaveTask(ENABLE_ROLLER_DRIVER);
1675   4              SchedulerSuspendTask(-1);
1676   4            }
1677   3            else
1678   3              SchedulerLeaveTask(SEND_ACK);
1679   3            break;
1680   3          }
1681   2      
1682   2           default:
1683   2             SchedulerLeaveTask(ENABLE_ROLLER_DRIVER);
1684   2             break;
1685   2      
1686   2         }
1687   1         return;
1688   1      
1689   1      }
1690          
1691          
1692          /****************************************************************************
1693           *
1694           *  NAME        : SetRollerSpeedTask
1695           *
1696           *  DESCRIPTION : This task sets the roller speed.
1697           *                After the operation is done it sends Ack msg and suspends itself
1698           ****************************************************************************/
1699          void SetRollerSpeedTask(BYTE Arg)
1700          {
1701   1      
1702   1        enum{
1703   1        SET_ROLLER_SPEED,
1704   1        WAIT_FOR_OP_DONE,
1705   1        SEND_ACK
1706   1        };
1707   1      
1708   1        switch (Arg)
1709   1        {
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 29  

1710   2        
1711   2          case SET_ROLLER_SPEED:
1712   2            if (Roller_SetSpeed(SetRollerSpeedTaskParams.Speed) == ROLLER_NO_ERROR)
1713   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
1714   2            else
1715   2              SchedulerLeaveTask(SET_ROLLER_SPEED);
1716   2            break;
1717   2      
1718   2          case WAIT_FOR_OP_DONE:
1719   2            if (Roller_IsSetOperationDone() == ROLLER_NO_ERROR)
1720   2              SchedulerLeaveTask(SEND_ACK);
1721   2            else
1722   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
1723   2            break;
1724   2      
1725   2          case SEND_ACK:
1726   2          { 
1727   3            TOHDBAckMsg xdata Msg;
1728   3      
1729   3            Msg.MsgId = ACK_MSG;
1730   3            Msg.RespondedMsgId = SET_ROLLER_SPEED_MSG;
1731   3            Msg.AckStatus = ACK_SUCCESS;
1732   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetRollerSpeedTaskParams.DestId,
1733   3                SetRollerSpeedTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
1734   3            {
1735   4              SchedulerLeaveTask(SET_ROLLER_SPEED);
1736   4              SchedulerSuspendTask(-1);
1737   4            }
1738   3            else
1739   3              SchedulerLeaveTask(SEND_ACK);
1740   3            break;
1741   3          }
1742   2      
1743   2           default:
1744   2             SchedulerLeaveTask(SET_ROLLER_SPEED);
1745   2             break;
1746   2      
1747   2         }
1748   1         return;
1749   1      
1750   1      
1751   1      }
1752          
1753          
1754          /****************************************************************************
1755           *
1756           *  NAME        : GetRollerStatusTask
1757           *
1758           *  DESCRIPTION : 
1759           ****************************************************************************/
1760          void GetRollerStatusTask(BYTE Arg)
1761          {
1762   1        enum{
1763   1        GET_ROLLER_SPEED,
1764   1        WAIT_FOR_GET_SPEED_OP_DONE,
1765   1        SEND_STATUS_RESPONSE
1766   1        };
1767   1      
1768   1        WORD Data;
1769   1      
1770   1        switch (Arg)
1771   1        {
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 30  

1772   2          case GET_ROLLER_SPEED:
1773   2            if (Roller_GetSpeed() == ROLLER_NO_ERROR)
1774   2              SchedulerLeaveTask(WAIT_FOR_GET_SPEED_OP_DONE);
1775   2            else
1776   2              SchedulerLeaveTask(GET_ROLLER_SPEED);
1777   2            break;
1778   2      
1779   2          case WAIT_FOR_GET_SPEED_OP_DONE:
1780   2            if (Roller_IsGetOperationDone(&Data)  == ROLLER_NO_ERROR)
1781   2            {
1782   3              GetRollerStatusTaskParams.Speed = Data; 
1783   3              SchedulerLeaveTask(SEND_STATUS_RESPONSE);
1784   3            }
1785   2            else
1786   2              SchedulerLeaveTask(WAIT_FOR_GET_SPEED_OP_DONE);
1787   2            break;
1788   2      
1789   2          case SEND_STATUS_RESPONSE:
1790   2          { 
1791   3            TRollerStatusMsg xdata Msg;
1792   3      
1793   3            Msg.MsgId = ROLLER_STATUS_MSG;
1794   3            Msg.OnOff = Roller_IsOn();
1795   3            Msg.Speed = GetRollerStatusTaskParams.Speed;
1796   3            SwapUnsignedShort(&(Msg.Speed));
1797   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TRollerStatusMsg),GetRollerStatusTaskParams.DestId,
1798   3                GetRollerStatusTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
1799   3            {
1800   4              SchedulerLeaveTask(GET_ROLLER_SPEED);
1801   4              SchedulerSuspendTask(-1);
1802   4            }
1803   3            else
1804   3              SchedulerLeaveTask(SEND_STATUS_RESPONSE);
1805   3            break;
1806   3          }
1807   2       
1808   2          default:
1809   2            SchedulerLeaveTask(GET_ROLLER_SPEED);
1810   2            break;
1811   2      
1812   2         }
1813   1         return;
1814   1      }
1815          
1816          
1817          /****************************************************************************
1818           *
1819           *  NAME        : SetPrintingHeadsParamsTask
1820           *
1821           *  DESCRIPTION : 
1822           ****************************************************************************/
1823          void SetPrintingHeadsParamsTask(BYTE Arg)
1824          {
1825   1        enum
1826   1        {
1827   1          SET_PULSE_TYPE,
1828   1          WAIT_FOR_PULSE_TYPE_OP_DONE,
1829   1          SET_DATA_MULTIPLIER,
1830   1          WAIT_FOR_DATA_MULTIPLIER_OP_DONE,
1831   1          SET_RESOLUTION_DIVIDER,
1832   1          WAIT_FOR_RESOLUTION_DIVIDER_OP_DONE,
1833   1          SET_DWELL_TIME,
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 31  

1834   1          WAIT_FOR_DWELL_TIME_OP_DONE,
1835   1          SET_FALL_TIME,
1836   1          WAIT_FOR_FALL_TIME_OP_DONE,
1837   1          SET_PULSE_WIDTH,
1838   1          WAIT_FOR_PULSE_WIDTH_OP_DONE,
1839   1          SET_INTERVAL,
1840   1          WAIT_FOR_INTERVAL_OP_DONE,    
1841   1          SEND_ACK
1842   1        };
1843   1      
1844   1        PRINT_DRV_STATUS Status;
1845   1      
1846   1        switch (Arg)
1847   1        { 
1848   2          case SET_PULSE_TYPE:
1849   2          {
1850   3            if(PrintDrv_WriteToRegister(FPGA_REG_PULSE_OP_MODE, SetPrintingHeadsTaskParams.PulseType) == PRINT_DRV_
             -NO_ERROR)
1851   3              SchedulerLeaveTask(WAIT_FOR_PULSE_TYPE_OP_DONE);
1852   3            else
1853   3              SchedulerLeaveTask(SET_PULSE_TYPE);
1854   3          }
1855   2          break;
1856   2      
1857   2          case WAIT_FOR_PULSE_TYPE_OP_DONE:
1858   2          {
1859   3            Status = PrintDrv_IsSetOperationDone();
1860   3            
1861   3            if(Status != PRINT_DRV_OP_NOT_DONE)
1862   3            { 
1863   4              if(Status == PRINT_DRV_NO_ERROR) 
1864   4                SchedulerLeaveTask(SET_DATA_MULTIPLIER); // next
1865   4              else
1866   4                SchedulerLeaveTask(SET_PULSE_TYPE);
1867   4            }
1868   3            else
1869   3              SchedulerLeaveTask(WAIT_FOR_PULSE_TYPE_OP_DONE);
1870   3          }
1871   2          break;
1872   2          
1873   2          case SET_DATA_MULTIPLIER:
1874   2          {
1875   3            if(PrintDrv_WriteToRegister(FPGA_REG_DATA_MULTIPLIER, SetPrintingHeadsTaskParams.DataMultiplier) == PRI
             -NT_DRV_NO_ERROR)
1876   3              SchedulerLeaveTask(WAIT_FOR_DATA_MULTIPLIER_OP_DONE);
1877   3            else
1878   3              SchedulerLeaveTask(SET_DATA_MULTIPLIER);
1879   3          }
1880   2          break;
1881   2      
1882   2          case WAIT_FOR_DATA_MULTIPLIER_OP_DONE:
1883   2          {
1884   3            Status = PrintDrv_IsSetOperationDone();
1885   3            
1886   3            if(Status != PRINT_DRV_OP_NOT_DONE)
1887   3            { 
1888   4              if(Status == PRINT_DRV_NO_ERROR) 
1889   4                SchedulerLeaveTask(SET_RESOLUTION_DIVIDER); // next
1890   4              else
1891   4                SchedulerLeaveTask(SET_DATA_MULTIPLIER);
1892   4            }
1893   3            else
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 32  

1894   3              SchedulerLeaveTask(WAIT_FOR_DATA_MULTIPLIER_OP_DONE);
1895   3          }
1896   2          break;
1897   2          
1898   2          case SET_RESOLUTION_DIVIDER:
1899   2          {
1900   3            if(PrintDrv_WriteToRegister(FPGA_REG_RESOLUTION_DIVIDER, SetPrintingHeadsTaskParams.ResolutionDivider) 
             -== PRINT_DRV_NO_ERROR)
1901   3              SchedulerLeaveTask(WAIT_FOR_RESOLUTION_DIVIDER_OP_DONE);
1902   3            else
1903   3              SchedulerLeaveTask(SET_RESOLUTION_DIVIDER);
1904   3          }
1905   2          break;
1906   2      
1907   2          case WAIT_FOR_RESOLUTION_DIVIDER_OP_DONE:
1908   2          {
1909   3            Status = PrintDrv_IsSetOperationDone();
1910   3            
1911   3            if(Status != PRINT_DRV_OP_NOT_DONE)
1912   3            { 
1913   4              if(Status == PRINT_DRV_NO_ERROR) 
1914   4                SchedulerLeaveTask(SET_DWELL_TIME); // next
1915   4              else
1916   4                SchedulerLeaveTask(WAIT_FOR_RESOLUTION_DIVIDER_OP_DONE);
1917   4            }
1918   3            else
1919   3              SchedulerLeaveTask(WAIT_FOR_RESOLUTION_DIVIDER_OP_DONE);
1920   3          }
1921   2          break;
1922   2      
1923   2          case SET_DWELL_TIME:
1924   2          {
1925   3            if(PrintDrv_WriteToRegister(PULSE1_DWELL_REGS[HeadIndex], SetPrintingHeadsTaskParams.FirstPulseDwellTim
             -e[HeadIndex]) == PRINT_DRV_NO_ERROR)
1926   3              SchedulerLeaveTask(WAIT_FOR_DWELL_TIME_OP_DONE);
1927   3            else
1928   3              SchedulerLeaveTask(SET_DWELL_TIME);
1929   3          }
1930   2          break;
1931   2      
1932   2          case WAIT_FOR_DWELL_TIME_OP_DONE:
1933   2          {
1934   3            Status = PrintDrv_IsSetOperationDone();
1935   3            
1936   3            if(Status != PRINT_DRV_OP_NOT_DONE)
1937   3            { 
1938   4              if(Status == PRINT_DRV_NO_ERROR)
1939   4              {         
1940   5                HeadIndex = ++HeadIndex % NUM_OF_HEADS;
1941   5                
1942   5                if(HeadIndex % NUM_OF_HEADS == 0)
1943   5                  SchedulerLeaveTask(SET_FALL_TIME); // next case
1944   5                else          
1945   5                  SchedulerLeaveTask(SET_DWELL_TIME); // next head index                    
1946   5              }
1947   4              else
1948   4                SchedulerLeaveTask(SET_DWELL_TIME);
1949   4            }
1950   3            else
1951   3              SchedulerLeaveTask(WAIT_FOR_DWELL_TIME_OP_DONE);
1952   3          }
1953   2          break;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 33  

1954   2      
1955   2          case SET_FALL_TIME:
1956   2          {
1957   3            if(PrintDrv_WriteToRegister(PULSE1_FT_REGS[HeadIndex], SetPrintingHeadsTaskParams.FirstPulseFallTime[He
             -adIndex]) == PRINT_DRV_NO_ERROR)
1958   3              SchedulerLeaveTask(WAIT_FOR_FALL_TIME_OP_DONE);
1959   3            else
1960   3              SchedulerLeaveTask(SET_FALL_TIME);
1961   3          }
1962   2          break;
1963   2      
1964   2          case WAIT_FOR_FALL_TIME_OP_DONE:
1965   2          {
1966   3            Status = PrintDrv_IsSetOperationDone();
1967   3            
1968   3            if(Status != PRINT_DRV_OP_NOT_DONE)
1969   3            { 
1970   4              if(Status == PRINT_DRV_NO_ERROR)
1971   4              {         
1972   5                HeadIndex = ++HeadIndex % NUM_OF_HEADS;
1973   5                
1974   5                if(HeadIndex % NUM_OF_HEADS == 0)
1975   5                  SchedulerLeaveTask(SET_PULSE_WIDTH); // next case
1976   5                else          
1977   5                  SchedulerLeaveTask(SET_FALL_TIME); // next head index                   
1978   5              }
1979   4              else
1980   4                SchedulerLeaveTask(SET_FALL_TIME);
1981   4            }
1982   3            else
1983   3              SchedulerLeaveTask(WAIT_FOR_FALL_TIME_OP_DONE);
1984   3          }
1985   2          break;
1986   2      
1987   2          case SET_PULSE_WIDTH:
1988   2          {
1989   3            if(PrintDrv_WriteToRegister(PULSE2_WIDTH_REGS[HeadIndex], SetPrintingHeadsTaskParams.SecondPulseWidth[H
             -eadIndex]) == PRINT_DRV_NO_ERROR)
1990   3              SchedulerLeaveTask(WAIT_FOR_PULSE_WIDTH_OP_DONE);
1991   3            else
1992   3              SchedulerLeaveTask(SET_PULSE_WIDTH);
1993   3          }
1994   2          break;
1995   2      
1996   2          case WAIT_FOR_PULSE_WIDTH_OP_DONE:
1997   2          {
1998   3            Status = PrintDrv_IsSetOperationDone();
1999   3            
2000   3            if(Status != PRINT_DRV_OP_NOT_DONE)
2001   3            { 
2002   4              if(Status == PRINT_DRV_NO_ERROR)
2003   4              {         
2004   5                HeadIndex = ++HeadIndex % NUM_OF_HEADS;
2005   5                
2006   5                if(HeadIndex % NUM_OF_HEADS == 0)
2007   5                  SchedulerLeaveTask(SET_INTERVAL); // next case
2008   5                else          
2009   5                  SchedulerLeaveTask(SET_PULSE_WIDTH); // next head index                   
2010   5              }
2011   4              else
2012   4                SchedulerLeaveTask(SET_PULSE_WIDTH);
2013   4            }
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 34  

2014   3            else
2015   3              SchedulerLeaveTask(WAIT_FOR_PULSE_WIDTH_OP_DONE);
2016   3          }
2017   2          break;    
2018   2      
2019   2          case SET_INTERVAL:
2020   2          {
2021   3            if(PrintDrv_WriteToRegister(PULSE_DELAY_REGS[HeadIndex], SetPrintingHeadsTaskParams.DelayToSecondPulse[
             -HeadIndex]) == PRINT_DRV_NO_ERROR)
2022   3              SchedulerLeaveTask(WAIT_FOR_INTERVAL_OP_DONE);
2023   3            else
2024   3              SchedulerLeaveTask(SET_INTERVAL);
2025   3          }
2026   2          break;
2027   2      
2028   2          case WAIT_FOR_INTERVAL_OP_DONE:
2029   2          {
2030   3            Status = PrintDrv_IsSetOperationDone();
2031   3            
2032   3            if(Status != PRINT_DRV_OP_NOT_DONE)
2033   3            { 
2034   4              if(Status == PRINT_DRV_NO_ERROR)
2035   4              {         
2036   5                HeadIndex = ++HeadIndex % NUM_OF_HEADS;
2037   5                
2038   5                if(HeadIndex % NUM_OF_HEADS == 0)
2039   5                  SchedulerLeaveTask(SEND_ACK); // next case
2040   5                else          
2041   5                  SchedulerLeaveTask(SET_INTERVAL); // next head index                    
2042   5              }
2043   4              else
2044   4                SchedulerLeaveTask(SET_INTERVAL);
2045   4            }
2046   3            else
2047   3              SchedulerLeaveTask(WAIT_FOR_INTERVAL_OP_DONE);
2048   3          }
2049   2          break;            
2050   2          
2051   2      
2052   2          case SEND_ACK:
2053   2          { 
2054   3            TOHDBAckMsg xdata Msg;
2055   3      
2056   3            Msg.MsgId          = ACK_MSG;
2057   3            Msg.RespondedMsgId = SET_PRINTING_HEADS_PARAMS_MSG;
2058   3            Msg.AckStatus      = ACK_SUCCESS;
2059   3            
2060   3            if(OHDBEdenProtocolSend((BYTE*)&Msg, sizeof(TOHDBAckMsg), SetPrintingHeadsTaskParams.DestId, SetPrintin
             -gHeadsTaskParams.TransactionId, TRUE) == EDEN_PROTOCOL_NO_ERROR)
2061   3            {
2062   4              SchedulerLeaveTask(0);
2063   4              SchedulerSuspendTask(-1);
2064   4            }
2065   3            else
2066   3              SchedulerLeaveTask(SEND_ACK);
2067   3            break;
2068   3          }
2069   2      
2070   2          default:
2071   2             SchedulerLeaveTask(0);
2072   2             break;
2073   2      
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 35  

2074   2         }
2075   1         return;
2076   1      
2077   1      }
2078          
2079          
2080          /****************************************************************************
2081           *
2082           *  NAME        : SetPrintingPassParamsTask
2083           *
2084           *  DESCRIPTION : 
2085           ****************************************************************************/
2086          void SetPrintingPassParamsTask(BYTE Arg)
2087          {
2088   1        enum{
2089   1        SET_START_PEG,
2090   1        WAIT_FOR_START_PEG_OP_DONE,
2091   1        SET_END_PEG,
2092   1        WAIT_FOR_END_PEG_OP_DONE,
2093   1        SET_NUM_OF_FIRES,
2094   1        WAIT_FOR_FIRES_OP_DONE,
2095   1        SET_BUMPER_START_PEG,
2096   1        WAIT_FOR_BUMPER_START_OP_DONE,
2097   1        SET_BUMPER_END_PEG,
2098   1        WAIT_FOR_BUMPER_END_OP_DONE,
2099   1        SEND_ACK
2100   1        };
2101   1      
2102   1        PRINT_DRV_STATUS Status;
2103   1      
2104   1        switch (Arg)
2105   1        {
2106   2        
2107   2          case SET_START_PEG:
2108   2            if (PrintDrv_SetStartPeg(SetPrintingPassTaskParams.StartPeg) == PRINT_DRV_NO_ERROR)
2109   2              SchedulerLeaveTask(WAIT_FOR_START_PEG_OP_DONE);
2110   2            else
2111   2              SchedulerLeaveTask(SET_START_PEG);
2112   2            break;
2113   2      
2114   2          case WAIT_FOR_START_PEG_OP_DONE:
2115   2            Status = PrintDrv_IsSetOperationDone();
2116   2            if (Status != PRINT_DRV_OP_NOT_DONE)
2117   2            { 
2118   3              if (Status == PRINT_DRV_NO_ERROR) 
2119   3                SchedulerLeaveTask(SET_END_PEG);
2120   3              else
2121   3                SchedulerLeaveTask(SET_START_PEG);
2122   3            }
2123   2            else
2124   2              SchedulerLeaveTask(WAIT_FOR_START_PEG_OP_DONE);
2125   2            break;
2126   2            
2127   2          case SET_END_PEG:
2128   2            if (PrintDrv_SetEndPeg(SetPrintingPassTaskParams.EndPeg) == PRINT_DRV_NO_ERROR)
2129   2              SchedulerLeaveTask(WAIT_FOR_END_PEG_OP_DONE);
2130   2            else
2131   2              SchedulerLeaveTask(SET_END_PEG);
2132   2            break;
2133   2      
2134   2          case WAIT_FOR_END_PEG_OP_DONE:
2135   2            Status = PrintDrv_IsSetOperationDone();
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 36  

2136   2            if (Status != PRINT_DRV_OP_NOT_DONE)
2137   2            { 
2138   3              if (Status == PRINT_DRV_NO_ERROR) 
2139   3                SchedulerLeaveTask(SET_NUM_OF_FIRES);
2140   3              else
2141   3                SchedulerLeaveTask(SET_END_PEG);
2142   3            }
2143   2            else
2144   2              SchedulerLeaveTask(WAIT_FOR_END_PEG_OP_DONE);
2145   2            break;
2146   2      
2147   2          case SET_NUM_OF_FIRES:
2148   2            if (PrintDrv_SetNumOfFires(SetPrintingPassTaskParams.NumOfFires) == PRINT_DRV_NO_ERROR)
2149   2              SchedulerLeaveTask(WAIT_FOR_FIRES_OP_DONE);
2150   2            else
2151   2              SchedulerLeaveTask(SET_NUM_OF_FIRES);
2152   2            break;
2153   2      
2154   2          case WAIT_FOR_FIRES_OP_DONE:
2155   2            Status = PrintDrv_IsSetOperationDone();
2156   2            if (Status != PRINT_DRV_OP_NOT_DONE)
2157   2            { 
2158   3              if (Status == PRINT_DRV_NO_ERROR) 
2159   3                SchedulerLeaveTask(SET_BUMPER_START_PEG);
2160   3              else
2161   3                SchedulerLeaveTask(SET_NUM_OF_FIRES);
2162   3            }
2163   2            else
2164   2              SchedulerLeaveTask(WAIT_FOR_FIRES_OP_DONE);
2165   2            break;
2166   2      
2167   2          case SET_BUMPER_START_PEG:
2168   2            if (PrintDrv_SetBumperStartPeg(SetPrintingPassTaskParams.BumperStartPeg) == PRINT_DRV_NO_ERROR)
2169   2              SchedulerLeaveTask(WAIT_FOR_BUMPER_START_OP_DONE);
2170   2            else
2171   2              SchedulerLeaveTask(SET_BUMPER_START_PEG);
2172   2            break;
2173   2      
2174   2          case WAIT_FOR_BUMPER_START_OP_DONE:
2175   2            Status = PrintDrv_IsSetOperationDone();
2176   2            if (Status != PRINT_DRV_OP_NOT_DONE)
2177   2            { 
2178   3              if (Status == PRINT_DRV_NO_ERROR) 
2179   3                SchedulerLeaveTask(SET_BUMPER_END_PEG);
2180   3              else
2181   3                SchedulerLeaveTask(SET_BUMPER_START_PEG);
2182   3            }
2183   2            else
2184   2              SchedulerLeaveTask(WAIT_FOR_BUMPER_START_OP_DONE);
2185   2            break;
2186   2      
2187   2          case SET_BUMPER_END_PEG:
2188   2            if (PrintDrv_SetBumperEndPeg(SetPrintingPassTaskParams.BumperEndPeg) == PRINT_DRV_NO_ERROR)
2189   2              SchedulerLeaveTask(WAIT_FOR_BUMPER_END_OP_DONE);
2190   2            else
2191   2              SchedulerLeaveTask(SET_BUMPER_END_PEG);
2192   2            break;
2193   2      
2194   2          case WAIT_FOR_BUMPER_END_OP_DONE:
2195   2            Status = PrintDrv_IsSetOperationDone();
2196   2            if (Status != PRINT_DRV_OP_NOT_DONE)
2197   2            { 
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 37  

2198   3              if (Status == PRINT_DRV_NO_ERROR) 
2199   3                SchedulerLeaveTask(SEND_ACK);
2200   3              else
2201   3                SchedulerLeaveTask(SET_BUMPER_END_PEG);
2202   3            }
2203   2            else
2204   2              SchedulerLeaveTask(WAIT_FOR_BUMPER_END_OP_DONE);
2205   2            break;
2206   2      
2207   2          case SEND_ACK:
2208   2          { 
2209   3            TOHDBAckMsg xdata Msg;
2210   3      
2211   3            Msg.MsgId = ACK_MSG;
2212   3            Msg.RespondedMsgId = SET_PRINTING_PASS_PARAMS_MSG;
2213   3            Msg.AckStatus = ACK_SUCCESS;
2214   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetPrintingPassTaskParams.DestId,
2215   3                SetPrintingPassTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2216   3            {
2217   4              SchedulerLeaveTask(SET_START_PEG);
2218   4              SchedulerSuspendTask(-1);
2219   4            }
2220   3            else
2221   3              SchedulerLeaveTask(SEND_ACK);
2222   3            break;
2223   3          }
2224   2      
2225   2           default:
2226   2             SchedulerLeaveTask(SET_START_PEG);
2227   2             break;
2228   2      
2229   2         }
2230   1         return;
2231   1      
2232   1      }
2233          
2234          
2235          /****************************************************************************
2236           *
2237           *  NAME        : EnablePrintingCircuitryTask
2238           *
2239           *  DESCRIPTION : Enebale the priniting circuitry (Go command). Reset the Go 
2240           *          command register (Disable priniting circuitry) before setting it.
2241           ****************************************************************************/
2242          void EnablePrintingCircuitryTask(BYTE Arg)
2243          {
2244   1        enum{
2245   1        DISABLE_PRINTING_CIRCUITRY,
2246   1        WAIT_FOR_DISABLE_OP_DONE,
2247   1        ENABLE_PRINTING_CIRCUITRY,
2248   1        WAIT_FOR_ENABLE_OP_DONE,
2249   1        SEND_ACK
2250   1        };
2251   1      
2252   1        PRINT_DRV_STATUS Status;
2253   1      
2254   1        switch (Arg)
2255   1        {
2256   2        
2257   2           case DISABLE_PRINTING_CIRCUITRY:
2258   2            if (PrintDrv_DisblePrintingCircuitry() == PRINT_DRV_NO_ERROR)
2259   2              SchedulerLeaveTask(WAIT_FOR_DISABLE_OP_DONE);
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 38  

2260   2            else
2261   2              SchedulerLeaveTask(DISABLE_PRINTING_CIRCUITRY);
2262   2            break;
2263   2      
2264   2          case WAIT_FOR_DISABLE_OP_DONE:
2265   2            Status = PrintDrv_IsSetOperationDone();
2266   2            if (Status != PRINT_DRV_OP_NOT_DONE)
2267   2            { 
2268   3              if (Status == PRINT_DRV_NO_ERROR) 
2269   3                SchedulerLeaveTask(ENABLE_PRINTING_CIRCUITRY);
2270   3              else
2271   3                SchedulerLeaveTask(DISABLE_PRINTING_CIRCUITRY);
2272   3            }
2273   2            else
2274   2              SchedulerLeaveTask(WAIT_FOR_DISABLE_OP_DONE);
2275   2            break;
2276   2      
2277   2          case ENABLE_PRINTING_CIRCUITRY:
2278   2            if (PrintDrv_EnablePrintingCircuitry() == PRINT_DRV_NO_ERROR)
2279   2              SchedulerLeaveTask(WAIT_FOR_ENABLE_OP_DONE);
2280   2            else
2281   2              SchedulerLeaveTask(ENABLE_PRINTING_CIRCUITRY);
2282   2            break;
2283   2      
2284   2          case WAIT_FOR_ENABLE_OP_DONE:
2285   2            Status = PrintDrv_IsSetOperationDone();
2286   2            if (Status != PRINT_DRV_OP_NOT_DONE)
2287   2            { 
2288   3              if (Status == PRINT_DRV_NO_ERROR) 
2289   3                SchedulerLeaveTask(SEND_ACK);
2290   3              else
2291   3                SchedulerLeaveTask(ENABLE_PRINTING_CIRCUITRY);
2292   3            }
2293   2            else
2294   2              SchedulerLeaveTask(WAIT_FOR_ENABLE_OP_DONE);
2295   2            break;
2296   2      
2297   2          case SEND_ACK:
2298   2          { 
2299   3            TOHDBAckMsg xdata Msg;
2300   3      
2301   3            Msg.MsgId = ACK_MSG;
2302   3            Msg.RespondedMsgId = ENABLE_PRINTING_CIRCUITRY_MSG;
2303   3            Msg.AckStatus = ACK_SUCCESS;
2304   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),EnablePrintingCircuitryTaskParams.DestId,
2305   3                EnablePrintingCircuitryTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2306   3            {
2307   4              SchedulerLeaveTask(DISABLE_PRINTING_CIRCUITRY);
2308   4              SchedulerSuspendTask(-1);
2309   4            }
2310   3            else
2311   3              SchedulerLeaveTask(SEND_ACK);
2312   3            break;
2313   3          }
2314   2      
2315   2           default:
2316   2             SchedulerLeaveTask(DISABLE_PRINTING_CIRCUITRY);
2317   2             break;
2318   2      
2319   2         }
2320   1         return;
2321   1      
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 39  

2322   1      
2323   1      }
2324          
2325          
2326          /****************************************************************************
2327           *
2328           *  NAME        : DisablePrintingCircuitryTask
2329           *
2330           *  DESCRIPTION : 
2331           ****************************************************************************/
2332          void DisablePrintingCircuitryTask(BYTE Arg)
2333          {
2334   1        enum{
2335   1        DISABLE_PRINTING_CIRCUITRY,
2336   1        WAIT_FOR_OP_DONE,
2337   1        SEND_ACK
2338   1        };
2339   1      
2340   1        PRINT_DRV_STATUS Status;
2341   1      
2342   1        switch (Arg)
2343   1        {
2344   2        
2345   2          case DISABLE_PRINTING_CIRCUITRY:
2346   2            if (PrintDrv_DisblePrintingCircuitry() == PRINT_DRV_NO_ERROR)
2347   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
2348   2            else
2349   2              SchedulerLeaveTask(DISABLE_PRINTING_CIRCUITRY);
2350   2            break;
2351   2      
2352   2          case WAIT_FOR_OP_DONE:
2353   2            Status = PrintDrv_IsSetOperationDone();
2354   2            if (Status != PRINT_DRV_OP_NOT_DONE)
2355   2            { 
2356   3              if (Status == PRINT_DRV_NO_ERROR) 
2357   3                SchedulerLeaveTask(SEND_ACK);
2358   3              else
2359   3                SchedulerLeaveTask(DISABLE_PRINTING_CIRCUITRY);
2360   3            }
2361   2            else
2362   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
2363   2            break;
2364   2      
2365   2          case SEND_ACK:
2366   2          { 
2367   3            TOHDBAckMsg xdata Msg;
2368   3      
2369   3            Msg.MsgId = ACK_MSG;
2370   3            Msg.RespondedMsgId = DISABLE_PRINTING_CIRCUITRY_MSG;
2371   3            Msg.AckStatus = ACK_SUCCESS;
2372   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),DisablePrintingCircuitryTaskParams.DestId,
2373   3                DisablePrintingCircuitryTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2374   3            {
2375   4              SchedulerLeaveTask(DISABLE_PRINTING_CIRCUITRY);
2376   4              SchedulerSuspendTask(-1);
2377   4            }
2378   3            else
2379   3              SchedulerLeaveTask(SEND_ACK);
2380   3            break;
2381   3          }
2382   2      
2383   2           default:
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 40  

2384   2             SchedulerLeaveTask(DISABLE_PRINTING_CIRCUITRY);
2385   2             break;
2386   2      
2387   2         }
2388   1         return;
2389   1      
2390   1      }
2391          
2392          
2393          /****************************************************************************
2394           *
2395           *  NAME        : GetHeatersStatusTask
2396           *
2397           *  DESCRIPTION : 
2398           ****************************************************************************/
2399          void GetHeatersStatusTask(BYTE Arg)
2400          {
2401   1        THeadsTemperatureStatusMsg xdata Msg;
2402   1      
2403   1        Msg.MsgId = HEADS_TEMPERATURES_STATUS_MSG;
2404   1        HeaterGetCurrentTemperatures(Msg.Temperatures);
2405   1        SwapUnsignedShortArray(Msg.Temperatures,Msg.Temperatures,NUM_OF_HEATERS);
2406   1      
2407   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(THeadsTemperatureStatusMsg),GetHeatersStatusTaskParams.DestId
             -,
2408   1            GetHeatersStatusTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2409   1          SchedulerSuspendTask(-1);
2410   1        else
2411   1          SchedulerLeaveTask(Arg);
2412   1      
2413   1      }
2414          
2415          
2416          
2417          /****************************************************************************
2418           *
2419           *  NAME        : SetHeatersStandbyTempTask
2420           *
2421           *  DESCRIPTION : This task sends ACK msg to inform that the 
2422           *                'Set Heaters Standby Temperatures' was done
2423           ****************************************************************************/
2424          void SetHeatersStandbyTempTask(BYTE Arg)
2425          {
2426   1        TOHDBAckMsg Msg;
2427   1      
2428   1        Msg.MsgId = ACK_MSG;
2429   1        Msg.RespondedMsgId = SET_HEATERS_STANDBY_TEMPERATURE_MSG;
2430   1        Msg.AckStatus = ACK_SUCCESS;
2431   1          
2432   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetHeatersStandbyTempTaskParams.DestId,
2433   1            SetHeatersStandbyTempTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2434   1          SchedulerSuspendTask(-1);
2435   1        else
2436   1          SchedulerLeaveTask(Arg);
2437   1      
2438   1      }
2439          
2440          
2441          
2442          /****************************************************************************
2443           *
2444           *  NAME        : GetHeatersStatusTask
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 41  

2445           *
2446           *  DESCRIPTION : 
2447           ****************************************************************************/
2448          void GetHeatersStandbyTempTask(BYTE Arg)
2449          {
2450   1        THeadsStandbyTemperatureStatusMsg xdata Msg;
2451   1      
2452   1        Msg.MsgId = HEADS_STANDBY_TEMPERATURES_MSG;
2453   1        HeaterGetStandbyTemperatures(Msg.Temperatures);
2454   1        SwapUnsignedShortArray(Msg.Temperatures,Msg.Temperatures,NUM_OF_HEATERS);
2455   1      
2456   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(THeadsStandbyTemperatureStatusMsg),GetHeatersStandbyTempTaskP
             -arams.DestId,
2457   1            GetHeatersStandbyTempTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2458   1          SchedulerSuspendTask(-1);
2459   1        else
2460   1          SchedulerLeaveTask(Arg);
2461   1      
2462   1      
2463   1      }
2464          
2465          
2466          /****************************************************************************
2467           *
2468           *  NAME        : SetBumperParamsTask
2469           *
2470           *  DESCRIPTION : Send ACK for the 'Set bumper paramas' msg
2471           ****************************************************************************/
2472          void SetBumperParamsTask(BYTE Arg)
2473          {
2474   1        TOHDBAckMsg Msg;
2475   1      
2476   1        Msg.MsgId = ACK_MSG;
2477   1        Msg.RespondedMsgId = SET_BUMPER_PARAMS_MSG;
2478   1        Msg.AckStatus = ACK_SUCCESS;
2479   1          
2480   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetBumperParamsTaskParams.DestId,
2481   1            SetBumperParamsTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2482   1          SchedulerSuspendTask(-1);
2483   1        else
2484   1          SchedulerLeaveTask(Arg);
2485   1      }
2486          
2487          
2488          /****************************************************************************
2489           *
2490           *  NAME        : SetHeatersTempTask
2491           *
2492           *  DESCRIPTION : This task sends ACK msg to inform that the 
2493           *                'Set Heaters Temperatures' was done
2494           ****************************************************************************/
2495          void SetHeatersTempTask(BYTE Arg)
2496          {
2497   1        TOHDBAckMsg Msg;
2498   1      
2499   1        Msg.MsgId = ACK_MSG;
2500   1        Msg.RespondedMsgId = SET_HEATERS_TEMPERATURES_MSG;
2501   1        Msg.AckStatus = ACK_SUCCESS;
2502   1          
2503   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetHeatersTempTaskParams.DestId,
2504   1            SetHeatersTempTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2505   1          SchedulerSuspendTask(-1);
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 42  

2506   1        else
2507   1          SchedulerLeaveTask(Arg);
2508   1      
2509   1      }
2510          
2511          
2512          /****************************************************************************
2513           *
2514           *  NAME        : SetHeatersOnOffTask
2515           *
2516           *  DESCRIPTION : This task sends ACK msg to inform that the 
2517           *                'Set Heaters On Off' was done
2518           ****************************************************************************/
2519          void SetHeatersOnOffTask(BYTE Arg)
2520          {
2521   1        TOHDBAckMsg Msg;
2522   1      
2523   1        Msg.MsgId = ACK_MSG;
2524   1        Msg.RespondedMsgId = SET_HEATERS_ON_OFF_MSG;
2525   1        Msg.AckStatus = ACK_SUCCESS;
2526   1          
2527   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetHeatersOnOffTaskParams.DestId,
2528   1            SetHeatersOnOffTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2529   1          SchedulerSuspendTask(-1);
2530   1        else
2531   1          SchedulerLeaveTask(Arg);
2532   1      
2533   1      }
2534          
2535          
2536          /****************************************************************************
2537           *
2538           *  NAME        : GetMaterialLevelTask
2539           *
2540           *  DESCRIPTION : This task sends the 'Material level sensors status' message
2541           ****************************************************************************/
2542          void GetMaterialLevelTask(BYTE Arg)
2543          {
2544   1        TOHDBMaterialLevelSensorsStatusMsg Msg;
2545   1      
2546   1        Msg.MsgId = MATERIAL_LEVEL_SENSORS_STATUS_MSG;
2547   1        
2548   1        Sensors_GetMaterialLevelSensors(Msg.ThermistorLevelArr); //12 thermistors
2549   1        
2550   1        SwapUnsignedShortArray(&Msg.ThermistorLevelArr, &Msg.ThermistorLevelArr, NUM_OF_THERMISTORS);
2551   1        
2552   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBMaterialLevelSensorsStatusMsg),GetMaterialLevelTaskParam
             -s.DestId, GetMaterialLevelTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2553   1          SchedulerSuspendTask(-1);
2554   1        else
2555   1          SchedulerLeaveTask(Arg);
2556   1      
2557   1      }
2558          
2559          /****************************************************************************
2560           *
2561           *  NAME        : IsHeadsVacuumOkTask
2562           *
2563           *  DESCRIPTION : This task sends the 'Heads vacuum ok' message 
2564           ****************************************************************************/
2565          void IsHeadsVacuumOkTask(BYTE Arg)
2566          {
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 43  

2567   1        THeadsVacuumOkMsg Msg;
2568   1      
2569   1        Msg.MsgId = HEADS_VACUUM_OK_MSG;
2570   1        Msg.VacuumOk = Sensors_IsHeadsVacuumOk(); 
2571   1          
2572   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(THeadsVacuumOkMsg),IsHeadsVacuumOkTaskParms.DestId,
2573   1            IsHeadsVacuumOkTaskParms.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2574   1          SchedulerSuspendTask(-1);
2575   1        else
2576   1          SchedulerLeaveTask(Arg);
2577   1      
2578   1      }
2579          
2580          
2581          /****************************************************************************
2582           *
2583           *  NAME        : GetVacuumSensorTask
2584           *
2585           *  DESCRIPTION : This task sends the 'Heads vacuum status' message 
2586           ****************************************************************************/
2587          void GetVacuumSensorTask(BYTE Arg)
2588          {
2589   1        THeadsVacuumStatusMsg Msg;
2590   1      
2591   1        Msg.MsgId = HEADS_VACUUM_STATUS_MSG;
2592   1        Sensors_GetVacuumSensor(&Msg.VacuumValue);
2593   1        SwapUnsignedShort(&Msg.VacuumValue);
2594   1          
2595   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(THeadsVacuumStatusMsg),GetVacuumSensorTaskParams.DestId,
2596   1            GetVacuumSensorTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2597   1          SchedulerSuspendTask(-1);
2598   1        else
2599   1          SchedulerLeaveTask(Arg);
2600   1      
2601   1      }
2602          
2603          
2604          /****************************************************************************
2605           *
2606           *  NAME        : GetAmbientTempTask
2607           *
2608           *  DESCRIPTION : This task sends the 'Ambient temperature status' message 
2609           ****************************************************************************/
2610          void GetAmbientTempTask(BYTE Arg)
2611          {
2612   1        TOHDBAmbientTemperatureStatusMsg Msg;
2613   1      
2614   1        Msg.MsgId = ANBIENT_TEMPERATURE_STATUS_MSG;
2615   1        Msg.TemperatureValue = Sensors_GetAmbientTempSensor();
2616   1        SwapUnsignedShort(&Msg.TemperatureValue);
2617   1        
2618   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAmbientTemperatureStatusMsg),GetAmbientTempTaskParams.De
             -stId,
2619   1            GetAmbientTempTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2620   1          SchedulerSuspendTask(-1);
2621   1        else
2622   1          SchedulerLeaveTask(Arg);
2623   1      
2624   1      }
2625          
2626          
2627          /****************************************************************************
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 44  

2628           *
2629           *  NAME        : SetHeatersOnOffTask
2630           *
2631           *  DESCRIPTION : This task sends ACK msg to inform that the 
2632           *          'Set heads vacuum params' was done
2633           ****************************************************************************/
2634          void SetHeadsVacuumTask(BYTE Arg)
2635          {
2636   1        TOHDBAckMsg Msg;
2637   1      
2638   1        Msg.MsgId = ACK_MSG;
2639   1        Msg.RespondedMsgId = SET_HEADS_VACUUM_PARAMS_MSG;
2640   1        Msg.AckStatus = ACK_SUCCESS;
2641   1          
2642   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetHeadsVacuumTaskParams.DestId,
2643   1            SetHeadsVacuumTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2644   1          SchedulerSuspendTask(-1);
2645   1        else
2646   1          SchedulerLeaveTask(Arg);
2647   1      }
2648          
2649          
2650          /****************************************************************************
2651           *
2652           *  NAME        : ResetDriverCircuitTask
2653           *
2654           *  DESCRIPTION : This task sends ACK msg to inform that the print driver circuit  
2655           *          was reset.
2656           ****************************************************************************/
2657          void ResetDriverCircuitTask(BYTE Arg)
2658          {
2659   1        enum
2660   1        {
2661   1          RESET_DRIVER_CIRCUIT,
2662   1          WAIT_FOR_RESET_DRIVER_OP_DONE,
2663   1          RESET_FPGA_FIFO,
2664   1          WAIT_FOR_RESET_FPGA_FIFO_DONE,
2665   1          SEND_ACK
2666   1        };
2667   1      
2668   1        PRINT_DRV_STATUS Status;  
2669   1        TXilinxMessage xdata Msg; 
2670   1      
2671   1        switch (Arg)
2672   1        {
2673   2        
2674   2          case RESET_DRIVER_CIRCUIT:
2675   2            if (PrintDrv_ResetDriver() == PRINT_DRV_NO_ERROR)
2676   2                SchedulerLeaveTask(WAIT_FOR_RESET_DRIVER_OP_DONE);
2677   2            else
2678   2              SchedulerLeaveTask(RESET_DRIVER_CIRCUIT);
2679   2            break;
2680   2      
2681   2          case WAIT_FOR_RESET_DRIVER_OP_DONE:
2682   2            Status = PrintDrv_IsSetOperationDone();
2683   2            if (Status != PRINT_DRV_OP_NOT_DONE)
2684   2            { 
2685   3              if (Status == PRINT_DRV_NO_ERROR) 
2686   3                SchedulerLeaveTask(RESET_FPGA_FIFO);
2687   3              else
2688   3                SchedulerLeaveTask(RESET_DRIVER_CIRCUIT);
2689   3            }
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 45  

2690   2            else
2691   2              SchedulerLeaveTask(WAIT_FOR_RESET_DRIVER_OP_DONE);
2692   2            break;
2693   2            
2694   2          case RESET_FPGA_FIFO:
2695   2            Msg.Address = FPGA_REG_MAIN_FIFO_RESET;
2696   2            Msg.Data    = 1; 
2697   2            if (XilinxWrite(&Msg) == XILINX_NO_ERROR)
2698   2                SchedulerLeaveTask(WAIT_FOR_RESET_FPGA_FIFO_DONE);
2699   2            else
2700   2              SchedulerLeaveTask(RESET_FPGA_FIFO);
2701   2            break;
2702   2      
2703   2          case WAIT_FOR_RESET_FPGA_FIFO_DONE:
2704   2            Status = PrintDrv_IsSetOperationDone();
2705   2            if (Status != PRINT_DRV_OP_NOT_DONE)
2706   2            { 
2707   3              if (Status == PRINT_DRV_NO_ERROR) 
2708   3                SchedulerLeaveTask(SEND_ACK);
2709   3              else
2710   3                SchedulerLeaveTask(RESET_FPGA_FIFO);
2711   3            }
2712   2            else
2713   2              SchedulerLeaveTask(WAIT_FOR_RESET_FPGA_FIFO_DONE);
2714   2            break;
2715   2      
2716   2          case SEND_ACK:
2717   2          { 
2718   3            TOHDBAckMsg xdata Msg;
2719   3      
2720   3            Msg.MsgId = ACK_MSG;
2721   3            Msg.RespondedMsgId = RESET_DRIVER_CIRCUIT_MSG;
2722   3            Msg.AckStatus = ACK_SUCCESS;
2723   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),ResetDriverCircuitTaskParams.DestId,
2724   3                ResetDriverCircuitTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2725   3            {
2726   4              SchedulerLeaveTask(RESET_DRIVER_CIRCUIT);
2727   4              SchedulerSuspendTask(-1);
2728   4            }
2729   3            else
2730   3              SchedulerLeaveTask(SEND_ACK);
2731   3            break;
2732   3          }
2733   2      
2734   2           default:
2735   2             SchedulerLeaveTask(RESET_DRIVER_CIRCUIT);
2736   2             break;
2737   2      
2738   2         }
2739   1         return;
2740   1      
2741   1      }
2742          
2743          
2744          /****************************************************************************
2745           *
2746           *  NAME        : ResetDriverStateTask
2747           *
2748           *  DESCRIPTION : This task sends ACK msg to inform that the print driver circuit  
2749           *                state machine was reset.
2750           ****************************************************************************/
2751          void ResetDriverStateTask(BYTE Arg)
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 46  

2752          {
2753   1        enum{
2754   1        RESET_DRIVER_STATE_MACHINE,
2755   1        WAIT_FOR_OP_DONE,
2756   1        SEND_ACK
2757   1        };
2758   1      
2759   1        PRINT_DRV_STATUS Status;
2760   1      
2761   1        switch (Arg)
2762   1        {
2763   2        
2764   2          case RESET_DRIVER_STATE_MACHINE:
2765   2            if (PrintDrv_ResetStateMachine() == PRINT_DRV_NO_ERROR)
2766   2                SchedulerLeaveTask(WAIT_FOR_OP_DONE);
2767   2            else
2768   2              SchedulerLeaveTask(RESET_DRIVER_STATE_MACHINE);
2769   2            break;
2770   2      
2771   2          case WAIT_FOR_OP_DONE:
2772   2            Status = PrintDrv_IsSetOperationDone();
2773   2            if (Status != PRINT_DRV_OP_NOT_DONE)
2774   2            { 
2775   3              if (Status == PRINT_DRV_NO_ERROR) 
2776   3                SchedulerLeaveTask(SEND_ACK);
2777   3              else
2778   3                SchedulerLeaveTask(RESET_DRIVER_STATE_MACHINE);
2779   3            }
2780   2            else
2781   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
2782   2            break;
2783   2      
2784   2          case SEND_ACK:
2785   2          { 
2786   3            TOHDBAckMsg xdata Msg;
2787   3      
2788   3            Msg.MsgId = ACK_MSG;
2789   3            Msg.RespondedMsgId = RESET_DRIVER_STATE_MACHINE_MSG;
2790   3            Msg.AckStatus = ACK_SUCCESS;
2791   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),ResetDriverStateTaskParams.DestId,
2792   3                ResetDriverStateTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2793   3            {
2794   4              SchedulerLeaveTask(RESET_DRIVER_STATE_MACHINE);
2795   4              SchedulerSuspendTask(-1);
2796   4            }
2797   3            else
2798   3              SchedulerLeaveTask(SEND_ACK);
2799   3            break;
2800   3          }
2801   2      
2802   2           default:
2803   2             SchedulerLeaveTask(RESET_DRIVER_STATE_MACHINE);
2804   2             break;
2805   2      
2806   2         }
2807   1         return;
2808   1      
2809   1      }
2810          
2811          
2812          /****************************************************************************
2813           *
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 47  

2814           *  NAME        : ApplyDefaultParamsTask
2815           *
2816           *  DESCRIPTION : This task inits the print driver and sends ack message
2817           ****************************************************************************/
2818          void ApplyDefaultParamsTask(BYTE Arg)
2819          {
2820   1        enum
2821   1        {
2822   1          SET_DIAGNOSTICS,
2823   1          WAIT_FOR_DIAG_OP_DONE,
2824   1          SET_COMM_DIRECTION,
2825   1          WAIT_FOR_COMM_OP_DONE,    
2826   1          SEND_ACK
2827   1        };
2828   1      
2829   1        PRINT_DRV_STATUS Status;
2830   1        
2831   1        switch (Arg)
2832   1        {
2833   2          case SET_DIAGNOSTICS:
2834   2            if (PrintDrv_SetDiagnostics(0) == PRINT_DRV_NO_ERROR)
2835   2                SchedulerLeaveTask(WAIT_FOR_DIAG_OP_DONE);
2836   2            else
2837   2              SchedulerLeaveTask(SET_DIAGNOSTICS);
2838   2            break;
2839   2      
2840   2          case WAIT_FOR_DIAG_OP_DONE:
2841   2            Status = PrintDrv_IsSetOperationDone();
2842   2            if (Status != PRINT_DRV_OP_NOT_DONE)
2843   2            {
2844   3              if (Status == PRINT_DRV_NO_ERROR)
2845   3                SchedulerLeaveTask(SET_COMM_DIRECTION);
2846   3              else
2847   3                SchedulerLeaveTask(SET_DIAGNOSTICS);
2848   3            }
2849   2            else
2850   2              SchedulerLeaveTask(WAIT_FOR_DIAG_OP_DONE);
2851   2            break;
2852   2        
2853   2          case SET_COMM_DIRECTION:
2854   2            if (PrintDrv_SetCommDirection(0) == PRINT_DRV_NO_ERROR)
2855   2                SchedulerLeaveTask(WAIT_FOR_COMM_OP_DONE);
2856   2            else
2857   2              SchedulerLeaveTask(SET_COMM_DIRECTION);
2858   2            break;
2859   2      
2860   2          case WAIT_FOR_COMM_OP_DONE:
2861   2            Status = PrintDrv_IsSetOperationDone();
2862   2            if (Status != PRINT_DRV_OP_NOT_DONE)
2863   2            {
2864   3              if (Status == PRINT_DRV_NO_ERROR)
2865   3                SchedulerLeaveTask(SEND_ACK);
2866   3              else
2867   3                SchedulerLeaveTask(SET_COMM_DIRECTION);
2868   3            }
2869   2            else
2870   2              SchedulerLeaveTask(WAIT_FOR_COMM_OP_DONE);
2871   2            break;    
2872   2      
2873   2          case SEND_ACK:
2874   2          { 
2875   3            TOHDBAckMsg xdata Msg;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 48  

2876   3      
2877   3            Msg.MsgId          = ACK_MSG;
2878   3            Msg.RespondedMsgId = APPPLY_DEFAULT_PRINT_PARAMS_MSG;
2879   3            Msg.AckStatus      = ACK_SUCCESS;
2880   3            if(OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),ApplyDefaultParamsTaskParams.DestId, ApplyDefau
             -ltParamsTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2881   3            {
2882   4              SchedulerLeaveTask(0);
2883   4              SchedulerSuspendTask(-1);
2884   4            }
2885   3            else
2886   3              SchedulerLeaveTask(SEND_ACK);
2887   3            break;
2888   3          }
2889   2      
2890   2           default:
2891   2             SchedulerLeaveTask(0);
2892   2             break;
2893   2      
2894   2         }
2895   1         return;
2896   1      
2897   1      }
2898          
2899          
2900          /****************************************************************************
2901           *
2902           *  NAME        : GetSoftwareVersionTask
2903           *
2904           *  DESCRIPTION : 
2905           ****************************************************************************/
2906          void GetSoftwareVersionTask(BYTE Arg)
2907          {
2908   1        TSoftwareVersionMsg Msg;
2909   1      
2910   1        Msg.MsgId = HEADS_DRIVER_SOFTWARE_VERSION_MSG;
2911   1        Msg.ExternalVersion = EXTERNAL_SOFTWARE_VERSION;
2912   1        Msg.InternalVersion = INTERNAL_SOFTWARE_VERSION;
2913   1       
2914   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TSoftwareVersionMsg),GetSoftwareVersionTaskParams.DestId,
2915   1            GetSoftwareVersionTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2916   1          SchedulerSuspendTask(-1);
2917   1        else
2918   1          SchedulerLeaveTask(Arg);  
2919   1      }
2920          
2921          
2922          void OHDBGetA2DSWVersionTask(BYTE Arg)
2923          {
2924   1        TOHDBA2DSoftwareVersionMsg Msg;
2925   1      
2926   1        Msg.MsgId = OHDB_A2D_SOFTWARE_VERSION_MSG;
2927   1      
2928   1        SpiA2D_GetSW_Version(&Msg.ExternalVersion, &Msg.InternalVersion);
2929   1      
2930   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBA2DSoftwareVersionMsg),OHDBGetA2DSWVersionTaskParams.Des
             -tId,
2931   1            OHDBGetA2DSWVersionTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2932   1          SchedulerSuspendTask(-1);
2933   1        else
2934   1          SchedulerLeaveTask(Arg);  
2935   1      }
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 49  

2936          
2937          /****************************************************************************
2938           *
2939           *  NAME        : GetHardwareVersionTask
2940           *
2941           *  DESCRIPTION : 
2942           ****************************************************************************/
2943          void GetHardwareVersionTask(BYTE Arg)
2944          {
2945   1        enum{
2946   1        GET_VERSION,
2947   1        WAIT_FOR_OP_DONE,
2948   1        SEND_RESPONSE
2949   1        };
2950   1      
2951   1        static WORD xdata Data;
2952   1      
2953   1        switch (Arg)
2954   1        {
2955   2          case GET_VERSION:
2956   2            if (XilinxRead(HARDWARE_VERSION_REG_ADDR) == XILINX_NO_ERROR)
2957   2                SchedulerLeaveTask(WAIT_FOR_OP_DONE);
2958   2            else
2959   2              SchedulerLeaveTask(GET_VERSION);
2960   2            break;
2961   2      
2962   2          case WAIT_FOR_OP_DONE:
2963   2            if (XilinxGetReceivedData((BYTE*)&Data)  != XILINX_BUSY)
2964   2              SchedulerLeaveTask(SEND_RESPONSE);
2965   2            else
2966   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
2967   2            break;
2968   2      
2969   2          case SEND_RESPONSE:
2970   2          { 
2971   3            THardwareVersionMsg xdata Msg;
2972   3      
2973   3            Msg.MsgId = HEADS_DRIVER_HARDWARE_VERSION_MSG;
2974   3            Msg.Version = Data;
2975   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(THardwareVersionMsg),GetHardwareVersionTaskParams.DestId,
2976   3                GetHardwareVersionTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
2977   3            {
2978   4              SchedulerLeaveTask(GET_VERSION);
2979   4              SchedulerSuspendTask(-1);
2980   4            }
2981   3            else
2982   3              SchedulerLeaveTask(SEND_RESPONSE);
2983   3            break;
2984   3          }
2985   2       
2986   2          default:
2987   2            SchedulerLeaveTask(GET_VERSION);
2988   2            break;
2989   2      
2990   2         }
2991   1         return;
2992   1      
2993   1      }
2994          
2995          #ifdef OCB_SIMULATOR
              // Vered
              void ReadRegisterTask(BYTE Arg)
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 50  

              {
                TReadRegisterResponseMsg Msg;
              
                Msg.MsgId = READ_FROM_REGISTER_RESPONSE;
                Msg.Address = ReadRegisterTaskParams.Address;
                EXTMem_Read(ReadRegisterTaskParams.Address, &Msg.Data);
              
              //  if (EdenProtocolSend((BYTE*)&Msg,sizeof(TReadRegisterResponseMsg),ReadRegisterTaskParams.DestId,OCB_ID,
               //     ReadRegisterTaskParams.TransactionId,TRUE,EDEN_OCB_PROTOCOL) == EDEN_PROTOCOL_NO_ERROR)
                if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TReadRegisterResponseMsg),ReadRegisterTaskParams.DestId,
                      ReadRegisterTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
                  SchedulerSuspendTask(-1);
                else
                  SchedulerLeaveTask(Arg);  
              }
              
              void WriteRegisterTask(BYTE Arg)
              {
                TOHDBAckMsg xdata Msg;
              
                Msg.MsgId = ACK_MSG;
                Msg.RespondedMsgId = WRITE_TO_REGISTER_MGS;
                Msg.AckStatus = ACK_SUCCESS;
              
              //  if (EdenProtocolSend((BYTE*)&Msg,sizeof(TAckMsg),WriteRegisterTaskParams.DestId,OCB_ID,
               //     WriteRegisterTaskParams.TransactionId,TRUE,EDEN_OCB_PROTOCOL) == EDEN_PROTOCOL_NO_ERROR)
                if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TAckMsg),WriteRegisterTaskParams.DestId,
                    WriteRegisterTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
                  SchedulerSuspendTask(-1);
                else
                  SchedulerLeaveTask(Arg);  
              }
              #endif
3031          /****************************************************************************
3032           *
3033           *  NAME        : OHDBPingTask
3034           *
3035           *  DESCRIPTION : 
3036           ****************************************************************************/
3037          void OHDBPingTask(BYTE Arg)
3038          {
3039   1        TOHDBPingMsg Msg;
3040   1      
3041   1        Msg.MsgId = PING_MSG;
3042   1       
3043   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBPingMsg),OHDBPingTaskParams.DestId,
3044   1            OHDBPingTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
3045   1          SchedulerSuspendTask(-1);
3046   1        else
3047   1          SchedulerLeaveTask(Arg);  
3048   1      
3049   1      }
3050          
3051          
3052          /****************************************************************************
3053           *
3054           *  NAME        : SetPrintingHeadVoltageTask
3055           *
3056           *  DESCRIPTION : This task sets the voltages of the printing heads by setting
3057           *                the printing heads potentiometers values
3058           ****************************************************************************/
3059          void SetPrintingHeadVoltageTask(BYTE Arg)
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 51  

3060          {
3061   1      #define NUMBER_OF_HAEDS  8
3062   1      
3063   1        enum
3064   1        {
3065   1          SET_HEAD_VOLTAGE,
3066   1          WAIT_FOR_OP_DONE,
3067   1          SEND_ACK
3068   1        };
3069   1        
3070   1        static BYTE xdata HeadNum = 0;
3071   1        PRINT_DRV_STATUS Status;
3072   1        
3073   1        switch (Arg)
3074   1        { 
3075   2          case SET_HEAD_VOLTAGE:
3076   2            if (PrintDrv_SetHeadVoltage(HeadNum, SetHeadVoltageTaskParams.PotentiometerValues[HeadNum]) == PRINT_DR
             -V_NO_ERROR)
3077   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
3078   2            else
3079   2              SchedulerLeaveTask(SET_HEAD_VOLTAGE);
3080   2            break;
3081   2          
3082   2          case WAIT_FOR_OP_DONE:
3083   2            Status = PrintDrv_IsSetVoltageDone(HeadNum);
3084   2            if (Status != PRINT_DRV_OP_NOT_DONE)
3085   2            { 
3086   3              if (Status == PRINT_DRV_NO_ERROR)
3087   3              { 
3088   4                HeadNum++;
3089   4                if (HeadNum < NUMBER_OF_HAEDS) 
3090   4                  SchedulerLeaveTask(SET_HEAD_VOLTAGE);
3091   4                else
3092   4                {
3093   5                  HeadNum = 0;
3094   5                  SchedulerLeaveTask(SEND_ACK);
3095   5                }
3096   4              }
3097   3              else
3098   3                SchedulerLeaveTask(SET_HEAD_VOLTAGE);
3099   3            }
3100   2            else
3101   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
3102   2            break;
3103   2          
3104   2          case SEND_ACK:
3105   2          { 
3106   3            TOHDBAckMsg xdata Msg;
3107   3            
3108   3            Msg.MsgId          = ACK_MSG;
3109   3            Msg.RespondedMsgId = SET_PRINTING_HEADS_VOLTAGES_MSG;
3110   3            Msg.AckStatus      = ACK_SUCCESS;
3111   3            
3112   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetHeadVoltageTaskParams.DestId,
3113   3                SetHeadVoltageTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
3114   3            {
3115   4              SchedulerLeaveTask(SET_HEAD_VOLTAGE);
3116   4              SchedulerSuspendTask(-1);
3117   4            }
3118   3            else
3119   3              SchedulerLeaveTask(SEND_ACK);
3120   3            break;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 52  

3121   3          }
3122   2        
3123   2          default:
3124   2            SchedulerLeaveTask(SET_HEAD_VOLTAGE);
3125   2            break;  
3126   2        }
3127   1        return;
3128   1      }
3129          
3130          /****************************************************************************
3131           *
3132           *  NAME        : GetPrintingHeadVoltageTask
3133           *
3134           *  DESCRIPTION : Sends the current printing heads voltages 
3135           ****************************************************************************/
3136          void GetPrintingHeadVoltageTask(BYTE Arg)
3137          {
3138   1        TPrintingHeadsVoltagesMsg xdata Msg;
3139   1      
3140   1        Msg.MsgId = PRINTING_HEADS_VOLTAGES_MSG;
3141   1        A2D0Reader_GetHeadsVoltages(Msg.HeadsVoltages);
3142   1        SwapUnsignedShortArray(Msg.HeadsVoltages,Msg.HeadsVoltages,8);
3143   1      
3144   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TPrintingHeadsVoltagesMsg),GetHeadVoltageTaskParams.DestId,
3145   1            GetHeadVoltageTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
3146   1          SchedulerSuspendTask(-1);
3147   1        else
3148   1          SchedulerLeaveTask(Arg);
3149   1      
3150   1      }
3151          
3152          
3153          /****************************************************************************
3154           *
3155           *  NAME        : GetPowerSuppliesTask
3156           *
3157           *  DESCRIPTION : Sends the current ppower supplies voltages 
3158           ****************************************************************************/
3159          void GetPowerSuppliesTask(BYTE Arg)
3160          {
3161   1        TPowerSuppliesVoltagesMsg xdata Msg;
3162   1      
3163   1        Msg.MsgId = POWER_SUPPLIES_VOLTAGES_MSG;
3164   1      
3165   1        Sensors_GetPowerSuppliesVoltages(&Msg.VppVoltage);
3166   1        SwapUnsignedShortArray(&Msg.VppVoltage,&Msg.VppVoltage,6);
3167   1      
3168   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TPowerSuppliesVoltagesMsg),GetPowerSuppliesTaskParams.DestId,
3169   1            GetPowerSuppliesTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
3170   1          SchedulerSuspendTask(-1);
3171   1        else
3172   1          SchedulerLeaveTask(Arg);
3173   1      }
3174          
3175          
3176          /****************************************************************************
3177           *
3178           *  NAME        : GetHeadDataTask
3179           *
3180           *  DESCRIPTION : Sends the head data of a specific head 
3181           ****************************************************************************/
3182          void GetHeadDataTask(BYTE Arg)
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 53  

3183          {
3184   1        THeadDataMsg xdata Msg;
3185   1      
3186   1        Msg.MsgId    = HEAD_DATA_MSG;
3187   1        Msg.HeadNum  = GetHeadDataTaskParams.HeadNum;
3188   1        Msg.Validity = HeadData_GetHeadData(GetHeadDataTaskParams.HeadNum, (BYTE *)&(Msg.A2DValueFor60C));
3189   1      
3190   1        SwapUnsignedShort(&(Msg.A2DValueFor60C));
3191   1        SwapUnsignedShort(&(Msg.A2DValueFor80C));
3192   1        SwapUnsignedLong((unsigned long *)&(Msg.Model10KHzLineGain));
3193   1        SwapUnsignedLong((unsigned long *)&(Msg.Model10KHzLineOffset));
3194   1        SwapUnsignedLong((unsigned long *)&(Msg.Model20KHzLineGain));
3195   1        SwapUnsignedLong((unsigned long *)&(Msg.Model20KHzLineOffset));
3196   1        SwapUnsignedLong((unsigned long *)&(Msg.Support10KHzLineGain));
3197   1        SwapUnsignedLong((unsigned long *)&(Msg.Support10KHzLineOffset));
3198   1        SwapUnsignedLong((unsigned long *)&(Msg.Support20KHzLineGain));
3199   1        SwapUnsignedLong((unsigned long *)&(Msg.Support20KHzLineOffset));
3200   1        SwapUnsignedLong((unsigned long *)&(Msg.XOffset));
3201   1        SwapUnsignedLong((unsigned long *)&(Msg.ProductionDate));
3202   1        SwapUnsignedShort(&(Msg.CheckSum));
3203   1      
3204   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(THeadDataMsg),GetHeadDataTaskParams.DestId,
3205   1            GetHeadDataTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
3206   1          SchedulerSuspendTask(-1);
3207   1        else
3208   1          SchedulerLeaveTask(Arg);
3209   1      }
3210          
3211          /****************************************************************************
3212           *
3213           *  NAME        : SetMaterialCoolingFansTask
3214           *
3215           *  DESCRIPTION : Send ack for the 'SetMaterialCoolingFansOnOff' message 
3216           ****************************************************************************/
3217          void SetMaterialCoolingFansTask(BYTE Arg)
3218          {
3219   1        TOHDBAckMsg Msg;
3220   1      
3221   1        Msg.MsgId = ACK_MSG;
3222   1        Msg.RespondedMsgId = SET_MATERIAL_COOLING_FAN_ON_OFF_MSG;
3223   1        Msg.AckStatus = ACK_SUCCESS;
3224   1          
3225   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetMaterialCoolingFansTaskParams.DestId,
3226   1            SetMaterialCoolingFansTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
3227   1          SchedulerSuspendTask(-1);
3228   1        else
3229   1          SchedulerLeaveTask(Arg);
3230   1      
3231   1      }
3232          
3233          /****************************************************************************
3234           *
3235           *  NAME        : GetFireAllStatusTask
3236           *
3237           *  DESCRIPTION : Send the current status and counter of the fire all task 
3238           ****************************************************************************/
3239          void GetFireAllStatusTask(BYTE Arg)
3240          {
3241   1        TFireStatusMsg xdata Msg;
3242   1      
3243   1        Msg.MsgId = FIRE_ALL_STATUS_MSG;
3244   1        Msg.Status = PrintDrv_GetFireAllStatus();
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 54  

3245   1        Msg.Counter = PrintDrv_GetFireAllCounter();
3246   1      
3247   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TFireStatusMsg),GetFireAllStatusTaskParams.DestId,
3248   1            GetFireAllStatusTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
3249   1          SchedulerSuspendTask(-1);
3250   1        else
3251   1          SchedulerLeaveTask(Arg);
3252   1      }
3253          
3254          
3255          /****************************************************************************
3256           *
3257           *  NAME        : SetDebugModeTask
3258           *
3259           *  DESCRIPTION : Enter / exit debug mode 
3260           *                (in debug mode the communication loss task is suspended)
3261           ****************************************************************************/
3262          void SetDebugModeTask(BYTE Arg)
3263          {
3264   1        TOHDBAckMsg Msg;
3265   1      
3266   1        Msg.MsgId = ACK_MSG;
3267   1        Msg.RespondedMsgId = SET_DEBUG_MODE_MSG;
3268   1        Msg.AckStatus = ACK_SUCCESS;
3269   1          
3270   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetDebugModeTaskParams.DestId,
3271   1            SetDebugModeTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
3272   1          SchedulerSuspendTask(-1);
3273   1        else
3274   1          SchedulerLeaveTask(Arg);
3275   1      }
3276          
3277          
3278          /****************************************************************************
3279           *
3280           *  NAME        : SetHeadDataNackTask
3281           *
3282           *  DESCRIPTION : Send NACK for the 'SetHeadData' request since this task is already running
3283           ****************************************************************************/
3284          void SetHeadDataNackTask(BYTE Arg)
3285          {
3286   1        TOHDBAckMsg Msg;
3287   1      
3288   1        Msg.MsgId = ACK_MSG;
3289   1        Msg.RespondedMsgId = SET_HEAD_DATA_MSG;
3290   1        Msg.AckStatus = ACK_FAILURE;
3291   1          
3292   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetHeadDataNackTaskParams.DestId,
3293   1            SetHeadDataNackTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
3294   1          SchedulerSuspendTask(-1);
3295   1        else
3296   1          SchedulerLeaveTask(Arg);
3297   1      }
3298          
3299          
3300          /****************************************************************************
3301           *
3302           *  NAME        : SetBumperImpactOnOffTask
3303           *
3304           *  DESCRIPTION : Send ACK for the 'Set bumper impact on/off' message
3305           ****************************************************************************/
3306          void SetBumperImpactOnOffTask(BYTE Arg)
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 55  

3307          {
3308   1        TOHDBAckMsg Msg;
3309   1      
3310   1        Msg.MsgId = ACK_MSG;
3311   1        Msg.RespondedMsgId = SET_BUMPER_IMPACT_ON_OFF;
3312   1        Msg.AckStatus = ACK_SUCCESS;
3313   1          
3314   1        if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetBumperImpactOnOffTaskParams.DestId,
3315   1            SetBumperImpactOnOffTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
3316   1          SchedulerSuspendTask(-1);
3317   1        else
3318   1          SchedulerLeaveTask(Arg);
3319   1      }
3320          
3321          
3322          /****************************************************************************
3323           *
3324           *  NAME        : SetBumperPegOnOffTask
3325           *
3326           *  DESCRIPTION : Enable\disable the bumper PEG mechanism and
3327           *                send ACK for the 'Set bumper impact on/off' message
3328           ****************************************************************************/
3329          void SetBumperPegOnOffTask(BYTE Arg)
3330          {
3331   1        enum{
3332   1        ENABLE_DISABLE_BUMPER_PEG,
3333   1        WAIT_FOR_OP_DONE,
3334   1        SEND_ACK
3335   1        };
3336   1      
3337   1        PRINT_DRV_STATUS Status;
3338   1      
3339   1        switch (Arg)
3340   1        {
3341   2        
3342   2          case ENABLE_DISABLE_BUMPER_PEG:
3343   2            if (PrintDrv_EnableDisableBumperPeg(SetBumperPegOnOffTaskParams.OnOff) == PRINT_DRV_NO_ERROR)
3344   2                SchedulerLeaveTask(WAIT_FOR_OP_DONE);
3345   2            else
3346   2              SchedulerLeaveTask(ENABLE_DISABLE_BUMPER_PEG);
3347   2            break;
3348   2      
3349   2          case WAIT_FOR_OP_DONE:
3350   2            Status = PrintDrv_IsSetOperationDone();
3351   2            if (Status != PRINT_DRV_OP_NOT_DONE)
3352   2            { 
3353   3              if (Status == PRINT_DRV_NO_ERROR) 
3354   3                SchedulerLeaveTask(SEND_ACK);
3355   3              else
3356   3                SchedulerLeaveTask(ENABLE_DISABLE_BUMPER_PEG);
3357   3            }
3358   2            else
3359   2              SchedulerLeaveTask(WAIT_FOR_OP_DONE);
3360   2            break;
3361   2      
3362   2          case SEND_ACK:
3363   2          { 
3364   3            TOHDBAckMsg xdata Msg;
3365   3      
3366   3            Msg.MsgId = ACK_MSG;
3367   3            Msg.RespondedMsgId = SET_BUMPER_PEG_ON_OFF;
3368   3            Msg.AckStatus = ACK_SUCCESS;
C51 COMPILER V9.52.0.0   MSGDECODEOHDB                                                     04/28/2015 17:26:02 PAGE 56  

3369   3            if (OHDBEdenProtocolSend((BYTE*)&Msg,sizeof(TOHDBAckMsg),SetBumperPegOnOffTaskParams.DestId,
3370   3                SetBumperPegOnOffTaskParams.TransactionId,TRUE) == EDEN_PROTOCOL_NO_ERROR)
3371   3            {
3372   4              SchedulerLeaveTask(ENABLE_DISABLE_BUMPER_PEG);
3373   4              SchedulerSuspendTask(-1);
3374   4            }
3375   3            else
3376   3              SchedulerLeaveTask(SEND_ACK);
3377   3            break;
3378   3          }
3379   2      
3380   2           default:
3381   2             SchedulerLeaveTask(ENABLE_DISABLE_BUMPER_PEG);
3382   2             break;
3383   2      
3384   2         }
3385   1         return;
3386   1      
3387   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  12470    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    665    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
