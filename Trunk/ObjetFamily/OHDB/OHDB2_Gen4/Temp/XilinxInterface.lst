C51 COMPILER V9.52.0.0   XILINXINTERFACE                                                   04/28/2015 17:26:00 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE XILINXINTERFACE
OBJECT MODULE PLACED IN .\Temp\XilinxInterface.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\SharedModules\Xilinx\XilinxInterface.c LARGE OPTIMIZE(0,SPEED) BROWSE IN
                    -CDIR(..\SharedModules\SysDef,SPI\,..\SharedModules\RingBuffer,UART\,A2D\,..\SharedModules\Xilinx,..\SharedModules\EdenPr
                    -otocol,Timer\,Potentiometer\,HeaterControl\,E2PROM\,MsgDecode\,..\SharedModules\Utilities,..\SharedModules\Scheduler,..\
                    -SharedModules\Roller,Potentiometer\,PrintDriver\,Sensors\,HeadData\,Utils\,Watchdog\,Version\,Actuators\,D2A\,Comparator
                    -\,Bumper\) DEFINE(C8051F123_CPU) DEBUG OBJECTEXTEND PRINT(.\Temp\XilinxInterface.lst) TABS(2) OBJECT(.\Temp\XilinxInterf
                    -ace.obj)

line level    source

   1          /*===========================================================================
   2           *   FILENAME       : Xilinx Interface {XilinxInterface.c}  
   3           *   PURPOSE        : Interface to the xilinx device  
   4           *   DATE CREATED   : 17/Oct/2001
   5           *   PROGRAMMER     : Nir Saadon 
   6           *   PROCEDURES     : 
   7           *===========================================================================*/
   8          //#pragma ROM(COMPACT)
   9          
  10          #include "XilinxInterface.h"
  11          
  12          #include "spidrv.h"
  13          
  14          
  15          // Constants
  16          // =========
  17          #define XILINX_BUFFER_LENGTH  5
  18          
  19          sbit FPGA_RESET = P3^1;
  20          
  21          
  22          // Type definitions
  23          // ================
  24          
  25          enum XILINX_MESSAGE {
  26            XILINX_ADDR_INDEX = 0,
  27            XILINX_DATA_MSB_INDEX,
  28            XILINX_DATA_LSB_INDEX,
  29            XILINX_MESSAGE_LENGTH
  30            };
  31          
  32           
  33          // Local routines
  34          // ==============
  35          
  36          
  37          // Module variables
  38          // ================================
  39          
  40          BYTE xdata XilinxDataIn[XILINX_BUFFER_LENGTH];
  41          BYTE xdata XilinxTransactionStatus;
  42          
  43          // Exported routines
  44          // =================
  45          
  46          /****************************************************************************
  47           *
  48           *  NAME        : XilinxInit
  49           *
  50           *  INPUT       : None
C51 COMPILER V9.52.0.0   XILINXINTERFACE                                                   04/28/2015 17:26:00 PAGE 2   

  51           *
  52           *  OUTPUT      : None
  53           *
  54           *  DESCRIPTION : Initialization of the xilinx interface                                        
  55           *
  56           ****************************************************************************/
  57          void XilinxInit()
  58          {
  59   1        XilinxTransactionStatus = XILINX_SEND_FAILED;
  60   1        
  61   1        FPGA_RESET = 1;
  62   1        FPGA_RESET = 0;
  63   1      }
  64          
  65          /****************************************************************************
  66           *
  67           *  NAME        : XilinxRead
  68           *
  69           *  INPUT       : The address
  70           *
  71           *  OUTPUT      : XILINX_STATUS.
  72           *
  73           *  DESCRIPTION : Read from the xilinx device                                        
  74           *
  75           ****************************************************************************/
  76          XILINX_STATUS XilinxRead(BYTE Address)
  77          {
  78   1        BYTE xdata *Message;
  79   1      
  80   1      // try to lock the SPI device
  81   1      // --------------------------
  82   1        if (SpiLock() == SPI_BUSY)
  83   1          return XILINX_SEND_FAILED;
  84   1        
  85   1      // set the device status to busy
  86   1      // -----------------------------
  87   1        XilinxTransactionStatus = XILINX_BUSY;
  88   1       
  89   1      // select the xilinx device 
  90   1      // ------------------------
  91   1        SpiSelectSlave(XILINX_SLAVE_ID,CHIP_SELECT);
  92   1      
  93   1      // set the R/W pin to read (low)
  94   1      // -----------------------------
  95   1        XILINX_R_W = 0;
  96   1      
  97   1      // prepare the message
  98   1      // -------------------
  99   1        Message = SpiGetTxBuffer();
 100   1        Message[XILINX_ADDR_INDEX] = Address;
 101   1        Message[XILINX_DATA_MSB_INDEX] = 0;
 102   1        Message[XILINX_DATA_LSB_INDEX] = 0;
 103   1      
 104   1      
 105   1      // send the message using the spi
 106   1      // ------------------------------
 107   1        SpiSend(XILINX_MESSAGE_LENGTH,XilinxDataIn,XilinxCallBack);
 108   1             
 109   1        return XILINX_NO_ERROR;
 110   1        
 111   1      }
 112          
C51 COMPILER V9.52.0.0   XILINXINTERFACE                                                   04/28/2015 17:26:00 PAGE 3   

 113          
 114          /****************************************************************************
 115           *
 116           *  NAME        : XilinxWrite
 117           *
 118           *  INPUT       : TXilinxMessage struct (address, data)
 119           *
 120           *  OUTPUT      : XILINX_STATUS.
 121           *
 122           *  DESCRIPTION : Write to the xilinx device                                        
 123           *
 124           ****************************************************************************/
 125          XILINX_STATUS XilinxWrite(TXilinxMessage *Msg)
 126          {
 127   1        BYTE xdata *Message;
 128   1      
 129   1      // try to lock the SPI device
 130   1      // --------------------------
 131   1        if (SpiLock() == SPI_BUSY)
 132   1          return XILINX_SEND_FAILED;
 133   1      
 134   1      // set the device status to busy
 135   1      // -----------------------------
 136   1        XilinxTransactionStatus = XILINX_BUSY;
 137   1      
 138   1      // select the xilinx device 
 139   1      // ------------------------
 140   1        SpiSelectSlave(XILINX_SLAVE_ID,CHIP_SELECT);
 141   1      
 142   1      // set the R/W pin to write (high)
 143   1      // -------------------------------
 144   1        XILINX_R_W = 1;
 145   1      
 146   1      // prepare the message
 147   1      // -------------------
 148   1        Message = SpiGetTxBuffer();
 149   1        Message[XILINX_ADDR_INDEX] = Msg->Address;
 150   1        Message[XILINX_DATA_MSB_INDEX] = (BYTE)(((Msg->Data) & MSB_MASK) >> 8);
 151   1        Message[XILINX_DATA_LSB_INDEX] = (BYTE)((Msg->Data) & LSB_MASK);
 152   1        
 153   1      // send the message using the spi
 154   1      // ------------------------------
 155   1        SpiSend(XILINX_MESSAGE_LENGTH,XilinxDataIn,XilinxCallBack);
 156   1             
 157   1        return XILINX_NO_ERROR;
 158   1      }
 159          
 160          
 161          /****************************************************************************
 162           *
 163           *  NAME        : XilinxCallBack
 164           *
 165           *  INPUT       : Transaction status
 166           *
 167           *  OUTPUT      : None.
 168           *
 169           *  DESCRIPTION : Called from the spi ISR, updates the transaction status.                                
             -        
 170           *
 171           ****************************************************************************/
 172          #ifdef OCB_SIMULATOR 
              void XilinxCallBack(BYTE Status)
C51 COMPILER V9.52.0.0   XILINXINTERFACE                                                   04/28/2015 17:26:00 PAGE 4   

              #else
 175          void XilinxCallBack(BYTE Status) using 3
 176          #endif
 177          {
 178   1        if (Status == SPI_NO_ERROR)
 179   1            XilinxTransactionStatus = XILINX_SEND_SUCCESS;
 180   1        else
 181   1          XilinxTransactionStatus = XILINX_SEND_FAILED;
 182   1      }
 183          
 184          /****************************************************************************
 185           *
 186           *  NAME        : XilinxGetReceivedData
 187           *
 188           *  INPUT       : Data buffer
 189           *
 190           *  OUTPUT      : XILINX_STATUS.
 191           *
 192           *  DESCRIPTION : Get the data received after calling XilinxRead().                                       
             - 
 193           *
 194           ****************************************************************************/
 195          XILINX_STATUS XilinxGetReceivedData(BYTE *Data)
 196          {
 197   1      // if the spi operation is not done yet
 198   1      // ------------------------------------
 199   1        if (XilinxTransactionStatus == XILINX_BUSY) 
 200   1          return XILINX_BUSY; 
 201   1      
 202   1        if (XilinxTransactionStatus == XILINX_SEND_SUCCESS)
 203   1        {
 204   2          Data[1] = XilinxDataIn[XILINX_DATA_LSB_INDEX];
 205   2          Data[0] = XilinxDataIn[XILINX_DATA_MSB_INDEX];
 206   2        }
 207   1      
 208   1      // deselect the device (CS)
 209   1      // ------------------------
 210   1        SpiSelectSlave(XILINX_SLAVE_ID,CHIP_DESELECT);
 211   1      
 212   1      
 213   1      // unlock the spi since the operation is done
 214   1      // ------------------------------------------
 215   1        SpiUnLock();
 216   1      
 217   1        return XilinxTransactionStatus; 
 218   1      }
 219          
 220          
 221          /****************************************************************************
 222           *
 223           *  NAME        : XilinxGetWriteActionStatus
 224           *
 225           *  INPUT       : None
 226           *
 227           *  OUTPUT      : XILINX_STATUS.
 228           *
 229           *  DESCRIPTION : Get the status of the last write operation.                                        
 230           *
 231           ****************************************************************************/
 232          XILINX_STATUS XilinxGetWriteActionStatus()
 233          {
 234   1      // if the spi operation is not done yet
C51 COMPILER V9.52.0.0   XILINXINTERFACE                                                   04/28/2015 17:26:00 PAGE 5   

 235   1      // ------------------------------------
 236   1        if (XilinxTransactionStatus == XILINX_BUSY) 
 237   1          return XILINX_BUSY; 
 238   1      
 239   1      // deselect the device (CS)
 240   1      // ------------------------
 241   1        SpiSelectSlave(XILINX_SLAVE_ID,CHIP_DESELECT);
 242   1      
 243   1      // set the R/W pin to read (low)
 244   1      // -------------------------------
 245   1        XILINX_R_W = 0;
 246   1      
 247   1      // unlock the spi since the operation is done
 248   1      // ------------------------------------------
 249   1        SpiUnLock();
 250   1      
 251   1        return XilinxTransactionStatus;
 252   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    522    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     18    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
